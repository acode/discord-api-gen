[
  {
    "namespace": "commands",
    "name": "commands/list",
    "title": "Get Global Application Commands",
    "method": "GET",
    "url": "/applications/{application_id}/commands",
    "description": "Fetch all of the global commands for your application\nReturns an array of [application command](https://discord.com/developers/docs/interactions/application-commands#application-command-object) objects.",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "with_localizations",
        "type": "boolean",
        "description": "Whether to include full localization dictionaries (`name_localizations` and `description_localizations`) in the returned objects, instead of the `name_localized` and `description_localized` fields\nDefault `false`.",
        "optional": true,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "commands",
    "name": "commands/create",
    "title": "Create Global Application Command",
    "method": "POST",
    "url": "/applications/{application_id}/commands",
    "description": "Create a new global command\nReturns `201` if a command with the same name does not already exist, or a `200` if it does (in which case the previous command will be overwritten). Both responses include an [application command](https://discord.com/developers/docs/interactions/application-commands#application-command-object) object.",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "name",
        "type": "string",
        "description": "[Name of command](https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-naming), 1-32 characters",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "name_localizations",
        "type": "object",
        "description": "Localization dictionary for the `name` field\nValues follow the same restrictions as `name`",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "description",
        "type": "string",
        "description": "1-100 character description for `CHAT_INPUT` commands",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "description_localizations",
        "type": "object",
        "description": "Localization dictionary for the `description` field\nValues follow the same restrictions as `description`",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "options",
        "type": "array",
        "description": "The parameters for the command",
        "optional": true,
        "isNullable": false,
        "schema": [
          {
            "type": "object",
            "object_reference": "application_command_option"
          }
        ]
      },
      {
        "name": "default_member_permissions",
        "type": "string",
        "description": "Set of [permissions](#DOCS_TOPICS_PERMISSIONS) represented as a bit set",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "dm_permission",
        "type": "boolean",
        "description": "Indicates whether the command is available in DMs with the app, only for globally-scoped commands\nBy default, commands are visible.",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "default_permission",
        "type": "boolean",
        "description": "Replaced by `default_member_permissions` and will be deprecated in the future\nIndicates whether the command is enabled by default when the app is added to a guild. Defaults to `true`",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "type",
        "type": "any",
        "description": "Type of command, defaults `1` if not set",
        "optional": true,
        "isNullable": false,
        "enum_reference": "one_of_application_command"
      },
      {
        "name": "nsfw",
        "type": "boolean",
        "description": "Indicates whether the command is [age-restricted](https://discord.com/developers/docs/interactions/application-commands#agerestricted-commands)",
        "optional": true,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "commands",
    "name": "commands/retrieve",
    "title": "Get Global Application Command",
    "method": "GET",
    "url": "/applications/{application_id}/commands/{command_id}",
    "description": "Fetch a global command for your application\nReturns an [application command](https://discord.com/developers/docs/interactions/application-commands#application-command-object) object.",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "command_id",
        "description": "Unique ID of command",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "commands",
    "name": "commands/update",
    "title": "Edit Global Application Command",
    "method": "PATCH",
    "url": "/applications/{application_id}/commands/{command_id}",
    "description": "Edit a global command\nReturns `200` and an [application command](https://discord.com/developers/docs/interactions/application-commands#application-command-object) object. All fields are optional, but any fields provided will entirely overwrite the existing values of those fields.",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "command_id",
        "description": "Unique ID of command",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "name",
        "type": "string",
        "description": "[Name of command](https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-naming), 1-32 characters",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "name_localizations",
        "type": "object",
        "description": "Localization dictionary for the `name` field\nValues follow the same restrictions as `name`",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "description",
        "type": "string",
        "description": "1-100 character description",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "description_localizations",
        "type": "object",
        "description": "Localization dictionary for the `description` field\nValues follow the same restrictions as `description`",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "options",
        "type": "array",
        "description": "The parameters for the command",
        "optional": true,
        "isNullable": false,
        "schema": [
          {
            "type": "object",
            "object_reference": "application_command_option"
          }
        ]
      },
      {
        "name": "default_member_permissions",
        "type": "string",
        "description": "Set of [permissions](#DOCS_TOPICS_PERMISSIONS) represented as a bit set",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "dm_permission",
        "type": "boolean",
        "description": "Indicates whether the command is available in DMs with the app, only for globally-scoped commands\nBy default, commands are visible.",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "default_permission",
        "type": "boolean",
        "description": "Replaced by `default_member_permissions` and will be deprecated in the future\nIndicates whether the command is enabled by default when the app is added to a guild. Defaults to `true`",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "nsfw",
        "type": "boolean",
        "description": "Indicates whether the command is [age-restricted](https://discord.com/developers/docs/interactions/application-commands#agerestricted-commands)",
        "optional": true,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "commands",
    "name": "commands/destroy",
    "title": "Delete Global Application Command",
    "method": "DELETE",
    "url": "/applications/{application_id}/commands/{command_id}",
    "description": "Deletes a global command\nReturns `204 No Content` on success.",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "command_id",
        "description": "Unique ID of command",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "commands",
    "name": "commands/bulkOverwrite",
    "title": "Bulk Overwrite Global Application Commands",
    "method": "PUT",
    "url": "/applications/{application_id}/commands",
    "description": "Takes a list of application commands, overwriting the existing global command list for this application\nReturns `200` and a list of [application command](https://discord.com/developers/docs/interactions/application-commands#application-command-object) objects. Commands that do not already exist will count toward daily application command create limits.",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "commands",
    "name": "guilds/commands/list",
    "title": "Get Guild Application Commands",
    "method": "GET",
    "url": "/applications/{application_id}/guilds/{guild_id}/commands",
    "description": "Fetch all of the guild commands for your application for a specific guild\nReturns an array of [application command](https://discord.com/developers/docs/interactions/application-commands#application-command-object) objects.",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "with_localizations",
        "type": "boolean",
        "description": "Whether to include full localization dictionaries (`name_localizations` and `description_localizations`) in the returned objects, instead of the `name_localized` and `description_localized` fields\nDefault `false`.",
        "optional": true,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "commands",
    "name": "guilds/commands/create",
    "title": "Create Guild Application Command",
    "method": "POST",
    "url": "/applications/{application_id}/guilds/{guild_id}/commands",
    "description": "Create a new guild command\nNew guild commands will be available in the guild immediately. Returns `201` if a command with the same name does not already exist, or a `200` if it does (in which case the previous command will be overwritten). Both responses include an [application command](https://discord.com/developers/docs/interactions/application-commands#application-command-object) object.",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "name",
        "type": "string",
        "description": "[Name of command](https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-naming), 1-32 characters",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "name_localizations",
        "type": "object",
        "description": "Localization dictionary for the `name` field\nValues follow the same restrictions as `name`",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "description",
        "type": "string",
        "description": "1-100 character description for `CHAT_INPUT` commands",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "description_localizations",
        "type": "object",
        "description": "Localization dictionary for the `description` field\nValues follow the same restrictions as `description`",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "options",
        "type": "array",
        "description": "Parameters for the command",
        "optional": true,
        "isNullable": false,
        "schema": [
          {
            "type": "object",
            "object_reference": "application_command_option"
          }
        ]
      },
      {
        "name": "default_member_permissions",
        "type": "string",
        "description": "Set of [permissions](#DOCS_TOPICS_PERMISSIONS) represented as a bit set",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "default_permission",
        "type": "boolean",
        "description": "Replaced by `default_member_permissions` and will be deprecated in the future\nIndicates whether the command is enabled by default when the app is added to a guild. Defaults to `true`",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "type",
        "type": "any",
        "description": "Type of command, defaults `1` if not set",
        "optional": true,
        "isNullable": false,
        "enum_reference": "one_of_application_command"
      },
      {
        "name": "nsfw",
        "type": "boolean",
        "description": "Indicates whether the command is [age-restricted](https://discord.com/developers/docs/interactions/application-commands#agerestricted-commands)",
        "optional": true,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "commands",
    "name": "guilds/commands/retrieve",
    "title": "Get Guild Application Command",
    "method": "GET",
    "url": "/applications/{application_id}/guilds/{guild_id}/commands/{command_id}",
    "description": "Fetch a guild command for your application\nReturns an [application command](https://discord.com/developers/docs/interactions/application-commands#application-command-object) object.",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "command_id",
        "description": "Unique ID of command",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "commands",
    "name": "guilds/commands/update",
    "title": "Edit Guild Application Command",
    "method": "PATCH",
    "url": "/applications/{application_id}/guilds/{guild_id}/commands/{command_id}",
    "description": "Edit a guild command\nUpdates for guild commands will be available immediately. Returns `200` and an [application command](https://discord.com/developers/docs/interactions/application-commands#application-command-object) object. All fields are optional, but any fields provided will entirely overwrite the existing values of those fields.",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "command_id",
        "description": "Unique ID of command",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "name",
        "type": "string",
        "description": "[Name of command](https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-naming), 1-32 characters",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "name_localizations",
        "type": "object",
        "description": "Localization dictionary for the `name` field\nValues follow the same restrictions as `name`",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "description",
        "type": "string",
        "description": "1-100 character description",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "description_localizations",
        "type": "object",
        "description": "Localization dictionary for the `description` field\nValues follow the same restrictions as `description`",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "options",
        "type": "array",
        "description": "Parameters for the command",
        "optional": true,
        "isNullable": false,
        "schema": [
          {
            "type": "object",
            "object_reference": "application_command_option"
          }
        ]
      },
      {
        "name": "default_member_permissions",
        "type": "string",
        "description": "Set of [permissions](#DOCS_TOPICS_PERMISSIONS) represented as a bit set",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "default_permission",
        "type": "boolean",
        "description": "Replaced by `default_member_permissions` and will be deprecated in the future\nIndicates whether the command is enabled by default when the app is added to a guild. Defaults to `true`",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "nsfw",
        "type": "boolean",
        "description": "Indicates whether the command is [age-restricted](https://discord.com/developers/docs/interactions/application-commands#agerestricted-commands)",
        "optional": true,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "commands",
    "name": "guilds/commands/destroy",
    "title": "Delete Guild Application Command",
    "method": "DELETE",
    "url": "/applications/{application_id}/guilds/{guild_id}/commands/{command_id}",
    "description": "Delete a guild command\nReturns `204 No Content` on success.",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "command_id",
        "description": "Unique ID of command",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "commands",
    "name": "guilds/commands/bulkOverwrite",
    "title": "Bulk Overwrite Guild Application Commands",
    "method": "PUT",
    "url": "/applications/{application_id}/guilds/{guild_id}/commands",
    "description": "Takes a list of application commands, overwriting the existing command list for this application for the targeted guild\nReturns `200` and a list of [application command](https://discord.com/developers/docs/interactions/application-commands#application-command-object) objects.",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "commands",
    "name": "guilds/commands/permissions/list",
    "title": "Get Guild Application Command Permissions",
    "method": "GET",
    "url": "/applications/{application_id}/guilds/{guild_id}/commands/permissions",
    "description": "Fetches permissions for all commands for your application in a guild\nReturns an array of [guild application command permissions](https://discord.com/developers/docs/interactions/application-commands#application-command-permissions-object-guild-application-command-permissions-structure) objects.",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "commands",
    "name": "guilds/commands/permissions/retrieve",
    "title": "Get Application Command Permissions",
    "method": "GET",
    "url": "/applications/{application_id}/guilds/{guild_id}/commands/{command_id}/permissions",
    "description": "Fetches permissions for a specific command for your application in a guild\nReturns a [guild application command permissions](https://discord.com/developers/docs/interactions/application-commands#application-command-permissions-object-guild-application-command-permissions-structure) object.",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "command_id",
        "description": "Unique ID of command",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "commands",
    "name": "guilds/commands/permissions/update",
    "title": "Edit Application Command Permissions",
    "method": "PUT",
    "url": "/applications/{application_id}/guilds/{guild_id}/commands/{command_id}/permissions",
    "description": "Edits command permissions for a specific command for your application in a guild and returns a [guild application command permissions](https://discord.com/developers/docs/interactions/application-commands#application-command-permissions-object-guild-application-command-permissions-structure) object\nFires an [Application Command Permissions Update](https://discord.com/developers/docs/topics/gateway-events#application-command-permissions-update) Gateway event.\n\nYou can add up to 100 permission overwrites for a command.",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "command_id",
        "description": "Unique ID of command",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "permissions",
        "type": "array",
        "description": "Permissions for the command in the guild",
        "optional": false,
        "isNullable": false,
        "schema": [
          {
            "type": "object",
            "object_reference": "application_command_permission"
          }
        ]
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "commands",
    "name": "guilds/commands/permissions/batchEdit",
    "title": "Batch Edit Application Command Permissions",
    "method": "PUT",
    "url": "/applications/{application_id}/guilds/{guild_id}/commands/permissions",
    "description": "",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "interactions",
    "name": "interactions/callback/create",
    "title": "Create Interaction Response",
    "method": "POST",
    "url": "/interactions/{interaction_id}/{interaction_token}/callback",
    "description": "Create a response to an Interaction from the gateway\nBody is an [interaction response](https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-response-object). Returns `204 No Content`.\n\nThis endpoint also supports file attachments similar to the webhook endpoints. Refer to [Uploading Files](https://discord.com/developers/docs/reference#uploading-files) for details on uploading files and `multipart/form-data` requests.",
    "pathParams": [
      {
        "name": "interaction_id",
        "description": "ID of the interaction",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "interaction_token",
        "description": "Continuation token for responding to the interaction",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "interactions",
    "name": "interactions/messages/original/retrieve",
    "title": "Get Original Interaction Response",
    "method": "GET",
    "url": "/webhooks/{application_id}/{interaction_token}/messages/@original",
    "description": "Returns the initial Interaction response\nFunctions the same as [Get Webhook Message](https://discord.com/developers/docs/resources/webhook#get-webhook-message).",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "interaction_token",
        "description": "Continuation token for responding to the interaction",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "interactions",
    "name": "interactions/messages/original/update",
    "title": "Edit Original Interaction Response",
    "method": "PATCH",
    "url": "/webhooks/{application_id}/{interaction_token}/messages/@original",
    "description": "Edits the initial Interaction response\nFunctions the same as [Edit Webhook Message](https://discord.com/developers/docs/resources/webhook#edit-webhook-message).",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "interaction_token",
        "description": "Continuation token for responding to the interaction",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "interactions",
    "name": "interactions/messages/original/destroy",
    "title": "Delete Original Interaction Response",
    "method": "DELETE",
    "url": "/webhooks/{application_id}/{interaction_token}/messages/@original",
    "description": "Deletes the initial Interaction response\nReturns `204 No Content` on success.",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "interaction_token",
        "description": "Continuation token for responding to the interaction",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "interactions",
    "name": "interactions/create",
    "title": "Create Followup Message",
    "method": "POST",
    "url": "/webhooks/{application_id}/{interaction_token}",
    "description": "Create a followup message for an Interaction\nFunctions the same as [Execute Webhook](https://discord.com/developers/docs/resources/webhook#execute-webhook), but `wait` is always true. The `thread_id`, `avatar_url`, and `username` parameters are not supported when using this endpoint for interaction followups.\n\n`flags` can be set to `64` to mark the message as ephemeral, except when it is the first followup message to a deferred Interactions Response. In that case, the `flags` field will be ignored, and the ephemerality of the message will be determined by the `flags` value in your original ACK.",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "interaction_token",
        "description": "Continuation token for responding to the interaction",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "interactions",
    "name": "interactions/messages/retrieve",
    "title": "Get Followup Message",
    "method": "GET",
    "url": "/webhooks/{application_id}/{interaction_token}/messages/{message_id}",
    "description": "Returns a followup message for an Interaction\nFunctions the same as [Get Webhook Message](https://discord.com/developers/docs/resources/webhook#get-webhook-message).",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "interaction_token",
        "description": "Continuation token for responding to the interaction",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "message_id",
        "description": "Id of the message",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "interactions",
    "name": "interactions/messages/update",
    "title": "Edit Followup Message",
    "method": "PATCH",
    "url": "/webhooks/{application_id}/{interaction_token}/messages/{message_id}",
    "description": "Edits a followup message for an Interaction\nFunctions the same as [Edit Webhook Message](https://discord.com/developers/docs/resources/webhook#edit-webhook-message).",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "interaction_token",
        "description": "Continuation token for responding to the interaction",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "message_id",
        "description": "Id of the message",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "interactions",
    "name": "interactions/messages/destroy",
    "title": "Delete Followup Message",
    "method": "DELETE",
    "url": "/webhooks/{application_id}/{interaction_token}/messages/{message_id}",
    "description": "",
    "pathParams": [
      {
        "name": "application_id",
        "description": "The id of the app",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "interaction_token",
        "description": "Continuation token for responding to the interaction",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "message_id",
        "description": "Id of the message",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "audit_logs",
    "name": "guilds/auditLogs/list",
    "title": "Get Guild Audit Log",
    "method": "GET",
    "url": "/guilds/{guild_id}/audit-logs",
    "description": "Returns an [audit log](https://discord.com/developers/docs/resources/audit-log#audit-log-object) object for the guild\nRequires the [`VIEW_AUDIT_LOG`](https://discord.com/developers/docs/topics/permissions#permissions-bitwise-permission-flags) permission.\n\nThe returned list of audit log entries is ordered based on whether you use `before` or `after`. When using `before`, the list is ordered by the audit log entry ID **descending** (newer entries first). If `after` is used, the list is reversed and appears in **ascending** order (older entries first). Omitting both `before` and `after` defaults to `before` the current timestamp and will show the most recent entries in descending order by ID, the opposite can be achieved using `after=0` (showing oldest entries).",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "user_id",
        "type": "string",
        "description": "Entries from a specific user ID",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "action_type",
        "type": "integer",
        "description": "Entries for a specific [audit log event](https://discord.com/developers/docs/resources/audit-log#audit-log-entry-object-audit-log-events)",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "before",
        "type": "string",
        "description": "Entries with ID less than a specific audit log entry ID",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "after",
        "type": "string",
        "description": "Entries with ID greater than a specific audit log entry ID",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "limit",
        "type": "integer",
        "description": "Maximum number of entries (between 1-100) to return, defaults to 50",
        "optional": true,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "auto_moderation",
    "name": "guilds/autoModeration/rules/list",
    "title": "List Auto Moderation Rules for Guild",
    "method": "GET",
    "url": "/guilds/{guild_id}/auto-moderation/rules",
    "description": "Get a list of all rules currently configured for the guild\nReturns a list of [auto moderation rule](https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object) objects for the given guild.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "auto_moderation",
    "name": "guilds/autoModeration/rules/retrieve",
    "title": "Get Auto Moderation Rule",
    "method": "GET",
    "url": "/guilds/{guild_id}/auto-moderation/rules/{auto_moderation_rule_id}",
    "description": "Get a single rule\nReturns an [auto moderation rule](https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object) object.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "auto_moderation_rule_id",
        "description": "The id of the rule",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "auto_moderation",
    "name": "guilds/autoModeration/rules/create",
    "title": "Create Auto Moderation Rule",
    "method": "POST",
    "url": "/guilds/{guild_id}/auto-moderation/rules",
    "description": "Create a new rule\nReturns an [auto moderation rule](https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object) on success. Fires an [Auto Moderation Rule Create](https://discord.com/developers/docs/topics/gateway-events#auto-moderation-rule-create) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "name",
        "type": "string",
        "description": "The rule name",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "event_type",
        "type": "integer",
        "description": "The [event type](https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-event-types)",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "trigger_type",
        "type": "integer",
        "description": "The [trigger type](https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-trigger-types)",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "trigger_metadata",
        "type": "object",
        "description": "The [trigger metadata](https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-trigger-metadata)",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "actions",
        "type": "array",
        "description": "The actions which will execute when the rule is triggered",
        "optional": false,
        "isNullable": false,
        "schema": [
          {
            "type": "object",
            "object_reference": "action"
          }
        ]
      },
      {
        "name": "enabled",
        "type": "boolean",
        "description": "Whether the rule is enabled (False by default)",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "exempt_roles",
        "type": "array",
        "description": "The role ids that should not be affected by the rule (Maximum of 20)",
        "optional": true,
        "isNullable": false,
        "schema": [
          {
            "type": "string"
          }
        ]
      },
      {
        "name": "exempt_channels",
        "type": "array",
        "description": "The channel ids that should not be affected by the rule (Maximum of 50)",
        "optional": true,
        "isNullable": false,
        "schema": [
          {
            "type": "string"
          }
        ]
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "auto_moderation",
    "name": "guilds/autoModeration/rules/update",
    "title": "Modify Auto Moderation Rule",
    "method": "PATCH",
    "url": "/guilds/{guild_id}/auto-moderation/rules/{auto_moderation_rule_id}",
    "description": "Modify an existing rule\nReturns an [auto moderation rule](https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object) on success. Fires an [Auto Moderation Rule Update](https://discord.com/developers/docs/topics/gateway-events#auto-moderation-rule-update) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "auto_moderation_rule_id",
        "description": "The id of the rule",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "name",
        "type": "string",
        "description": "The rule name",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "event_type",
        "type": "integer",
        "description": "The [event type](https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-event-types)",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "trigger_metadata",
        "type": "object",
        "description": "The [trigger metadata](https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-trigger-metadata)",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "actions",
        "type": "array",
        "description": "The actions which will execute when the rule is triggered",
        "optional": false,
        "isNullable": false,
        "schema": [
          {
            "type": "object",
            "object_reference": "action"
          }
        ]
      },
      {
        "name": "enabled",
        "type": "boolean",
        "description": "Whether the rule is enabled",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "exempt_roles",
        "type": "array",
        "description": "The role ids that should not be affected by the rule (Maximum of 20)",
        "optional": false,
        "isNullable": false,
        "schema": [
          {
            "type": "string"
          }
        ]
      },
      {
        "name": "exempt_channels",
        "type": "array",
        "description": "The channel ids that should not be affected by the rule (Maximum of 50)",
        "optional": false,
        "isNullable": false,
        "schema": [
          {
            "type": "string"
          }
        ]
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "auto_moderation",
    "name": "guilds/autoModeration/rules/destroy",
    "title": "Delete Auto Moderation Rule",
    "method": "DELETE",
    "url": "/guilds/{guild_id}/auto-moderation/rules/{auto_moderation_rule_id}",
    "description": "Delete a rule\nReturns a `204` on success. Fires an [Auto Moderation Rule Delete](https://discord.com/developers/docs/topics/gateway-events#auto-moderation-rule-delete) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "auto_moderation_rule_id",
        "description": "The id of the rule",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/retrieve",
    "title": "Get Channel",
    "method": "GET",
    "url": "/channels/{channel_id}",
    "description": "Get a channel by ID\nReturns a [channel](https://discord.com/developers/docs/resources/channel#channel-object) object.  If the channel is a thread, a [thread member](https://discord.com/developers/docs/resources/channel#thread-member-object) object is included in the returned result.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/update",
    "title": "Modify Channel",
    "method": "PATCH",
    "url": "/channels/{channel_id}",
    "description": "Update a channel's settings\nReturns a [channel](https://discord.com/developers/docs/resources/channel#channel-object) on success, and a 400 BAD REQUEST on invalid parameters. All JSON parameters are optional.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/destroy",
    "title": "Delete/Close Channel",
    "method": "DELETE",
    "url": "/channels/{channel_id}",
    "description": "Delete a channel, or close a private message\nRequires the `MANAGE_CHANNELS` permission for the guild, or `MANAGE_THREADS` if the channel is a thread. Deleting a category does not delete its child channels; they will have their `parent_id` removed and a [Channel Update](https://discord.com/developers/docs/topics/gateway-events#channel-update) Gateway event will fire for each of them. Returns a [channel](https://discord.com/developers/docs/resources/channel#channel-object) object on success. Fires a [Channel Delete](https://discord.com/developers/docs/topics/gateway-events#channel-delete) Gateway event (or [Thread Delete](https://discord.com/developers/docs/topics/gateway-events#thread-delete) if the channel was a thread).",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/messages/list",
    "title": "Get Channel Messages",
    "method": "GET",
    "url": "/channels/{channel_id}/messages",
    "description": "Retrieves the messages in a channel\nReturns an array of [message](https://discord.com/developers/docs/resources/channel#message-object) objects on success.\n\nIf operating on a guild channel, this endpoint requires the current user to have the `VIEW_CHANNEL` permission. If the channel is a voice channel, they must _also_ have the `CONNECT` permission.\n\nIf the current user is missing the `READ_MESSAGE_HISTORY` permission in the channel, then no messages will be returned.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "around",
        "type": "string",
        "description": "Get messages around this message ID",
        "default": "absent",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "before",
        "type": "string",
        "description": "Get messages before this message ID",
        "default": "absent",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "after",
        "type": "string",
        "description": "Get messages after this message ID",
        "default": "absent",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "limit",
        "type": "integer",
        "description": "Max number of messages to return (1-100)",
        "default": "50",
        "optional": true,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/messages/retrieve",
    "title": "Get Channel Message",
    "method": "GET",
    "url": "/channels/{channel_id}/messages/{message_id}",
    "description": "Retrieves a specific message in the channel\nReturns a [message](https://discord.com/developers/docs/resources/channel#message-object) object on success.\n\nIf operating on a guild channel, this endpoint requires the current user to have the `VIEW_CHANNEL` and `READ_MESSAGE_HISTORY` permissions. If the channel is a voice channel, they must _also_ have the `CONNECT` permission.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "message_id",
        "description": "Id of the message",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/messages/create",
    "title": "Create Message",
    "method": "POST",
    "url": "/channels/{channel_id}/messages",
    "description": "Post a message to a guild text or DM channel\nReturns a [message](https://discord.com/developers/docs/resources/channel#message-object) object. Fires a [Message Create](https://discord.com/developers/docs/topics/gateway-events#message-create) Gateway event. See [message formatting](https://discord.com/developers/docs/reference#message-formatting) for more information on how to properly format messages.\n\nTo create a message as a reply to another message, apps can include a [`message_reference`](https://discord.com/developers/docs/resources/channel#message-reference-object-message-reference-structure) with a `message_id`. The `channel_id` and `guild_id` in the `message_reference` are optional, but will be validated if provided.\n\nFiles must be attached using a `multipart/form-data` body as described in [Uploading Files](https://discord.com/developers/docs/reference#uploading-files).",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "content",
        "type": "string",
        "description": "Message contents (up to 2000 characters)",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "nonce",
        "type": "string",
        "description": "Can be used to verify a message was sent (up to 25 characters)\nValue will appear in the [Message Create event](https://discord.com/developers/docs/topics/gateway-events#message-create).",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "tts",
        "type": "boolean",
        "description": "`true` if this is a TTS message",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "embeds",
        "type": "array",
        "description": "Up to 10 `rich` embeds (up to 6000 characters)",
        "optional": true,
        "isNullable": false,
        "schema": [
          {
            "type": "object",
            "object_reference": "embed"
          }
        ]
      },
      {
        "name": "allowed_mentions",
        "type": "object",
        "description": "Allowed mentions for the message",
        "optional": true,
        "isNullable": false,
        "object_reference": "allowed_mention"
      },
      {
        "name": "message_reference",
        "type": "object",
        "description": "Include to make your message a reply",
        "optional": true,
        "isNullable": false,
        "object_reference": "message_reference"
      },
      {
        "name": "components",
        "type": "array",
        "description": "Components to include with the message",
        "optional": true,
        "isNullable": false,
        "schema": [
          {
            "type": "object",
            "object_reference": "message_component",
            "name": "action_row"
          }
        ]
      },
      {
        "name": "sticker_ids",
        "type": "array",
        "description": "IDs of up to 3 [stickers](https://discord.com/developers/docs/resources/sticker#sticker-object) in the server to send in the message",
        "optional": true,
        "isNullable": false,
        "schema": [
          {
            "type": "string"
          }
        ]
      },
      {
        "name": "attachments",
        "type": "array",
        "description": "Attachment objects with filename and description\nSee [Uploading Files](https://discord.com/developers/docs/reference#uploading-files)",
        "optional": true,
        "isNullable": false,
        "schema": [
          {
            "name": "attachment",
            "type": "object",
            "schema": [
              {
                "name": "filename",
                "type": "string"
              },
              {
                "name": "description",
                "type": "string"
              },
              {
                "name": "file",
                "type": "buffer"
              }
            ]
          }
        ]
      },
      {
        "name": "flags",
        "type": "integer",
        "description": "[Message flags](https://discord.com/developers/docs/resources/channel#message-object-message-flags) combined as a [bitfield](https://en.wikipedia.org/wiki/Bit_field) (only `SUPPRESS_EMBEDS` and `SUPPRESS_NOTIFICATIONS` can be set)",
        "optional": true,
        "isNullable": false
      }
    ],
    "supports_multipart": true,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/messages/crosspost/create",
    "title": "Crosspost Message",
    "method": "POST",
    "url": "/channels/{channel_id}/messages/{message_id}/crosspost",
    "description": "Crosspost a message in an Announcement Channel to following channels\nThis endpoint requires the `SEND_MESSAGES` permission, if the current user sent the message, or additionally the `MANAGE_MESSAGES` permission, for all other messages, to be present for the current user.\n\nReturns a [message](https://discord.com/developers/docs/resources/channel#message-object) object. Fires a [Message Update](https://discord.com/developers/docs/topics/gateway-events#message-update) Gateway event.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "message_id",
        "description": "Id of the message",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/messages/reactions/me/update",
    "title": "Create Reaction",
    "method": "PUT",
    "url": "/channels/{channel_id}/messages/{message_id}/reactions/{emoji}/@me",
    "description": "Create a reaction for the message\nThis endpoint requires the `READ_MESSAGE_HISTORY` permission to be present on the current user. Additionally, if nobody else has reacted to the message using this emoji, this endpoint requires the `ADD_REACTIONS` permission to be present on the current user. Returns a 204 empty response on success. Fires a [Message Reaction Add](https://discord.com/developers/docs/topics/gateway-events#message-reaction-add) Gateway event.\nThe `emoji` must be [URL Encoded](https://en.wikipedia.org/wiki/Percent-encoding) or the request will fail with `10014: Unknown Emoji`. To use custom emoji, you must encode it in the format `name:id` with the emoji name and emoji id.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "message_id",
        "description": "Id of the message",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "emoji",
        "description": "[emoji id](https://discord.com/developers/docs/reference#image-formatting)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/messages/reactions/me/destroy",
    "title": "Delete Own Reaction",
    "method": "DELETE",
    "url": "/channels/{channel_id}/messages/{message_id}/reactions/{emoji}/@me",
    "description": "Delete a reaction the current user has made for the message\nReturns a 204 empty response on success. Fires a [Message Reaction Remove](https://discord.com/developers/docs/topics/gateway-events#message-reaction-remove) Gateway event.\nThe `emoji` must be [URL Encoded](https://en.wikipedia.org/wiki/Percent-encoding) or the request will fail with `10014: Unknown Emoji`. To use custom emoji, you must encode it in the format `name:id` with the emoji name and emoji id.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "message_id",
        "description": "Id of the message",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "emoji",
        "description": "[emoji id](https://discord.com/developers/docs/reference#image-formatting)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/messages/reactions/destroy",
    "title": "Delete User Reaction",
    "method": "DELETE",
    "url": "/channels/{channel_id}/messages/{message_id}/reactions/{emoji}/{user_id}",
    "description": "Deletes another user's reaction\nThis endpoint requires the `MANAGE_MESSAGES` permission to be present on the current user. Returns a 204 empty response on success. Fires a [Message Reaction Remove](https://discord.com/developers/docs/topics/gateway-events#message-reaction-remove) Gateway event.\nThe `emoji` must be [URL Encoded](https://en.wikipedia.org/wiki/Percent-encoding) or the request will fail with `10014: Unknown Emoji`. To use custom emoji, you must encode it in the format `name:id` with the emoji name and emoji id.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "message_id",
        "description": "Id of the message",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "emoji",
        "description": "[emoji id](https://discord.com/developers/docs/reference#image-formatting)",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "user_id",
        "description": "The user's id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/messages/reactions/retrieve",
    "title": "Get Reactions",
    "method": "GET",
    "url": "/channels/{channel_id}/messages/{message_id}/reactions/{emoji}",
    "description": "Get a list of users that reacted with this emoji\nReturns an array of [user](https://discord.com/developers/docs/resources/user#user-object) objects on success.\nThe `emoji` must be [URL Encoded](https://en.wikipedia.org/wiki/Percent-encoding) or the request will fail with `10014: Unknown Emoji`. To use custom emoji, you must encode it in the format `name:id` with the emoji name and emoji id.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "message_id",
        "description": "Id of the message",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "emoji",
        "description": "[emoji id](https://discord.com/developers/docs/reference#image-formatting)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "after",
        "type": "string",
        "description": "Get users after this user ID",
        "default": "absent",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "limit",
        "type": "integer",
        "description": "Max number of users to return (1-100)",
        "default": "25",
        "optional": true,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/messages/reactions/destroy/all",
    "title": "Delete All Reactions",
    "method": "DELETE",
    "url": "/channels/{channel_id}/messages/{message_id}/reactions",
    "description": "Deletes all reactions on a message\nThis endpoint requires the `MANAGE_MESSAGES` permission to be present on the current user. Fires a [Message Reaction Remove All](https://discord.com/developers/docs/topics/gateway-events#message-reaction-remove-all) Gateway event.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "message_id",
        "description": "Id of the message",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/messages/reactions/emoji/destroy",
    "title": "Delete All Reactions for Emoji",
    "method": "DELETE",
    "url": "/channels/{channel_id}/messages/{message_id}/reactions/{emoji}",
    "description": "Deletes all the reactions for a given emoji on a message\nThis endpoint requires the `MANAGE_MESSAGES` permission to be present on the current user. Fires a [Message Reaction Remove Emoji](https://discord.com/developers/docs/topics/gateway-events#message-reaction-remove-emoji) Gateway event.\nThe `emoji` must be [URL Encoded](https://en.wikipedia.org/wiki/Percent-encoding) or the request will fail with `10014: Unknown Emoji`. To use custom emoji, you must encode it in the format `name:id` with the emoji name and emoji id.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "message_id",
        "description": "Id of the message",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "emoji",
        "description": "[emoji id](https://discord.com/developers/docs/reference#image-formatting)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/messages/update",
    "title": "Edit Message",
    "method": "PATCH",
    "url": "/channels/{channel_id}/messages/{message_id}",
    "description": "Edit a previously sent message\nThe fields `content`, `embeds`, and `flags` can be edited by the original message author. Other users can only edit `flags` and only if they have the `MANAGE_MESSAGES` permission in the corresponding channel. When specifying flags, ensure to include all previously set flags/bits in addition to ones that you are modifying. Only `flags` documented in the table below may be modified by users (unsupported flag changes are currently ignored without error).\n\nWhen the `content` field is edited, the `mentions` array in the message object will be reconstructed from scratch based on the new content. The `allowed_mentions` field of the edit request controls how this happens. If there is no explicit `allowed_mentions` in the edit request, the content will be parsed with _default_ allowances, that is, without regard to whether or not an `allowed_mentions` was present in the request that originally created the message.\n\nReturns a [message](https://discord.com/developers/docs/resources/channel#message-object) object. Fires a [Message Update](https://discord.com/developers/docs/topics/gateway-events#message-update) Gateway event.\n\nRefer to [Uploading Files](https://discord.com/developers/docs/reference#uploading-files) for details on attachments and `multipart/form-data` requests.\nAny provided files will be **appended** to the message. To remove or replace files you will have to supply the `attachments` field which specifies the files to retain on the message after edit.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "message_id",
        "description": "Id of the message",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "content",
        "type": "string",
        "description": "Message contents (up to 2000 characters)",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "embeds",
        "type": "array",
        "description": "Up to 10 `rich` embeds (up to 6000 characters)",
        "optional": true,
        "isNullable": true,
        "schema": [
          {
            "type": "object",
            "object_reference": "embed"
          }
        ]
      },
      {
        "name": "flags",
        "type": "integer",
        "description": "Edit the [flags](https://discord.com/developers/docs/resources/channel#message-object-message-flags) of a message (only `SUPPRESS_EMBEDS` can currently be set/unset)",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "allowed_mentions",
        "type": "object",
        "description": "Allowed mentions for the message",
        "optional": true,
        "isNullable": true,
        "object_reference": "allowed_mention"
      },
      {
        "name": "components",
        "type": "array",
        "description": "Components to include with the message",
        "optional": true,
        "isNullable": true,
        "schema": [
          {
            "type": "object",
            "object_reference": "component",
            "name": "action_row"
          }
        ]
      },
      {
        "name": "attachments",
        "type": "array",
        "description": "Attached files to keep and possible descriptions for new files\nSee [Uploading Files](https://discord.com/developers/docs/reference#uploading-files)",
        "optional": true,
        "isNullable": true,
        "schema": [
          {
            "name": "attachment",
            "type": "object",
            "schema": [
              {
                "name": "filename",
                "type": "string"
              },
              {
                "name": "description",
                "type": "string"
              },
              {
                "name": "file",
                "type": "buffer"
              }
            ]
          }
        ]
      }
    ],
    "supports_multipart": true,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/messages/destroy",
    "title": "Delete Message",
    "method": "DELETE",
    "url": "/channels/{channel_id}/messages/{message_id}",
    "description": "Delete a message\nIf operating on a guild channel and trying to delete a message that was not sent by the current user, this endpoint requires the `MANAGE_MESSAGES` permission. Returns a 204 empty response on success. Fires a [Message Delete](https://discord.com/developers/docs/topics/gateway-events#message-delete) Gateway event.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "message_id",
        "description": "Id of the message",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/messages/bulkDelete/create",
    "title": "Bulk Delete Messages",
    "method": "POST",
    "url": "/channels/{channel_id}/messages/bulk-delete",
    "description": "Delete multiple messages in a single request\nThis endpoint can only be used on guild channels and requires the `MANAGE_MESSAGES` permission. Returns a 204 empty response on success. Fires a [Message Delete Bulk](https://discord.com/developers/docs/topics/gateway-events#message-delete-bulk) Gateway event.\n\nAny message IDs given that do not exist or are invalid will count towards the minimum and maximum message count (currently 2 and 100 respectively).",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "messages",
        "type": "array",
        "description": "An array of message ids to delete (2-100)",
        "optional": false,
        "isNullable": false,
        "schema": [
          {
            "type": "string"
          }
        ]
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/permissions/update",
    "title": "Edit Channel Permissions",
    "method": "PUT",
    "url": "/channels/{channel_id}/permissions/{overwrite_id}",
    "description": "Edit the channel permission overwrites for a user or role in a channel\nOnly usable for guild channels. Requires the `MANAGE_ROLES` permission. Only permissions your bot has in the guild or parent channel (if applicable) can be allowed/denied (unless your bot has a `MANAGE_ROLES` overwrite in the channel). Returns a 204 empty response on success. Fires a [Channel Update](https://discord.com/developers/docs/topics/gateway-events#channel-update) Gateway event. For more information about permissions, see [permissions](https://discord.com/developers/docs/topics/permissions#permissions).",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "overwrite_id",
        "description": "Role or user id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "allow",
        "type": "string",
        "description": "The bitwise value of all allowed permissions (default `\"0\"`)",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "deny",
        "type": "string",
        "description": "The bitwise value of all disallowed permissions (default `\"0\"`)",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "type",
        "type": "integer",
        "description": "0 for a role or 1 for a member",
        "optional": false,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/invites/list",
    "title": "Get Channel Invites",
    "method": "GET",
    "url": "/channels/{channel_id}/invites",
    "description": "Returns a list of [invite](https://discord.com/developers/docs/resources/invite#invite-object) objects (with [invite metadata](https://discord.com/developers/docs/resources/invite#invite-metadata-object)) for the channel\nOnly usable for guild channels. Requires the `MANAGE_CHANNELS` permission.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/invites/create",
    "title": "Create Channel Invite",
    "method": "POST",
    "url": "/channels/{channel_id}/invites",
    "description": "Create a new [invite](https://discord.com/developers/docs/resources/invite#invite-object) object for the channel\nOnly usable for guild channels. Requires the `CREATE_INSTANT_INVITE` permission. All JSON parameters for this route are optional, however the request body is not. If you are not sending any fields, you still have to send an empty JSON object (`{}`). Returns an [invite](https://discord.com/developers/docs/resources/invite#invite-object) object. Fires an [Invite Create](https://discord.com/developers/docs/topics/gateway-events#invite-create) Gateway event.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "max_age",
        "type": "integer",
        "description": "Duration of invite in seconds before expiry, or 0 for never\nbetween 0 and 604800 (7 days)",
        "default": "86400 (24 hours)",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "max_uses",
        "type": "integer",
        "description": "Max number of uses or 0 for unlimited\nbetween 0 and 100",
        "default": "0",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "temporary",
        "type": "boolean",
        "description": "Whether this invite only grants temporary membership",
        "default": "false",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "unique",
        "type": "boolean",
        "description": "If true, don't try to reuse a similar invite (useful for creating many unique one time use invites)",
        "default": "false",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "target_type",
        "type": "integer",
        "description": "The [type of target](https://discord.com/developers/docs/resources/invite#invite-object-invite-target-types) for this voice channel invite",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "target_user_id",
        "type": "string",
        "description": "The id of the user whose stream to display for this invite, required if `target_type` is 1, the user must be streaming in the channel",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "target_application_id",
        "type": "string",
        "description": "The id of the embedded application to open for this invite, required if `target_type` is 2, the application must have the `EMBEDDED` flag",
        "optional": false,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/permissions/destroy",
    "title": "Delete Channel Permission",
    "method": "DELETE",
    "url": "/channels/{channel_id}/permissions/{overwrite_id}",
    "description": "Delete a channel permission overwrite for a user or role in a channel\nOnly usable for guild channels. Requires the `MANAGE_ROLES` permission. Returns a 204 empty response on success. Fires a [Channel Update](https://discord.com/developers/docs/topics/gateway-events#channel-update) Gateway event. For more information about permissions, see [permissions](https://discord.com/developers/docs/topics/permissions#permissions)",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "overwrite_id",
        "description": "Role or user id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/followers/create",
    "title": "Follow Announcement Channel",
    "method": "POST",
    "url": "/channels/{channel_id}/followers",
    "description": "Follow an Announcement Channel to send messages to a target channel\nRequires the `MANAGE_WEBHOOKS` permission in the target channel. Returns a [followed channel](https://discord.com/developers/docs/resources/channel#followed-channel-object) object. Fires a [Webhooks Update](https://discord.com/developers/docs/topics/gateway-events#webhooks-update) Gateway event for the target channel.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "webhook_channel_id",
        "type": "string",
        "description": "Id of target channel",
        "optional": false,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/typing/create",
    "title": "Trigger Typing Indicator",
    "method": "POST",
    "url": "/channels/{channel_id}/typing",
    "description": "Post a typing indicator for the specified channel\nGenerally bots should **not** implement this route. However, if a bot is responding to a command and expects the computation to take a few seconds, this endpoint may be called to let the user know that the bot is processing their message. Returns a 204 empty response on success. Fires a [Typing Start](https://discord.com/developers/docs/topics/gateway-events#typing-start) Gateway event.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/pins/list",
    "title": "Get Pinned Messages",
    "method": "GET",
    "url": "/channels/{channel_id}/pins",
    "description": "Returns all pinned messages in the channel as an array of [message](https://discord.com/developers/docs/resources/channel#message-object) objects.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/pins/update",
    "title": "Pin Message",
    "method": "PUT",
    "url": "/channels/{channel_id}/pins/{message_id}",
    "description": "Pin a message in a channel\nRequires the `MANAGE_MESSAGES` permission. Returns a 204 empty response on success. Fires a [Channel Pins Update](https://discord.com/developers/docs/topics/gateway-events#channel-pins-update) Gateway event.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "message_id",
        "description": "Id of the message",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/pins/destroy",
    "title": "Unpin Message",
    "method": "DELETE",
    "url": "/channels/{channel_id}/pins/{message_id}",
    "description": "Unpin a message in a channel\nRequires the `MANAGE_MESSAGES` permission. Returns a 204 empty response on success. Fires a [Channel Pins Update](https://discord.com/developers/docs/topics/gateway-events#channel-pins-update) Gateway event.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "message_id",
        "description": "Id of the message",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/recipients/update",
    "title": "Group DM Add Recipient",
    "method": "PUT",
    "url": "/channels/{channel_id}/recipients/{user_id}",
    "description": "Adds a recipient to a Group DM using their access token.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "user_id",
        "description": "The user's id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "access_token",
        "type": "string",
        "description": "Access token of a user that has granted your app the `gdm.join` scope",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "nick",
        "type": "string",
        "description": "Nickname of the user being added",
        "optional": false,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/recipients/destroy",
    "title": "Group DM Remove Recipient",
    "method": "DELETE",
    "url": "/channels/{channel_id}/recipients/{user_id}",
    "description": "Removes a recipient from a Group DM.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "user_id",
        "description": "The user's id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/messages/threads/create",
    "title": "Start Thread from Message",
    "method": "POST",
    "url": "/channels/{channel_id}/messages/{message_id}/threads",
    "description": "Creates a new thread from an existing message\nReturns a [channel](https://discord.com/developers/docs/resources/channel#channel-object) on success, and a 400 BAD REQUEST on invalid parameters. Fires a [Thread Create](https://discord.com/developers/docs/topics/gateway-events#thread-create) and a [Message Update](https://discord.com/developers/docs/topics/gateway-events#message-update) Gateway event.\n\nWhen called on a `GUILD_TEXT` channel, creates a `PUBLIC_THREAD`. When called on a `GUILD_ANNOUNCEMENT` channel, creates a `ANNOUNCEMENT_THREAD`. Does not work on a [`GUILD_FORUM`](https://discord.com/developers/docs/resources/channel#start-thread-in-forum-channel) channel. The id of the created thread will be the same as the id of the source message, and as such a message can only have a single thread created from it.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "message_id",
        "description": "Id of the message",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "name",
        "type": "string",
        "description": "1-100 character channel name",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "auto_archive_duration",
        "type": "integer",
        "description": "The thread will stop showing in the channel list after `auto_archive_duration` minutes of inactivity, can be set to: 60, 1440, 4320, 10080",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "rate_limit_per_user",
        "type": "integer",
        "description": "Amount of seconds a user has to wait before sending another message (0-21600)",
        "optional": true,
        "isNullable": true
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/threads/empty/create",
    "title": "Start Thread without Message",
    "method": "POST",
    "url": "/channels/{channel_id}/threads",
    "description": "Creates a new thread that is not connected to an existing message\nReturns a [channel](https://discord.com/developers/docs/resources/channel#channel-object) on success, and a 400 BAD REQUEST on invalid parameters. Fires a [Thread Create](https://discord.com/developers/docs/topics/gateway-events#thread-create) Gateway event.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "name",
        "type": "string",
        "description": "1-100 character channel name",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "auto_archive_duration",
        "type": "integer",
        "description": "The thread will stop showing in the channel list after `auto_archive_duration` minutes of inactivity, can be set to: 60, 1440, 4320, 10080",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "type",
        "type": "integer",
        "description": "The [type of thread](https://discord.com/developers/docs/resources/channel#channel-object-channel-types) to create",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "invitable",
        "type": "boolean",
        "description": "Whether non-moderators can add other non-moderators to a thread; only available when creating a private thread",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "rate_limit_per_user",
        "type": "integer",
        "description": "Amount of seconds a user has to wait before sending another message (0-21600)",
        "optional": true,
        "isNullable": true
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/threads/create",
    "title": "Start Thread in Forum Channel",
    "method": "POST",
    "url": "/channels/{channel_id}/threads",
    "description": "Creates a new thread in a forum channel, and sends a message within the created thread\nReturns a [channel](https://discord.com/developers/docs/resources/channel#channel-object), with a nested [message](https://discord.com/developers/docs/resources/channel#message-object) object, on success, and a 400 BAD REQUEST on invalid parameters. Fires a [Thread Create](https://discord.com/developers/docs/topics/gateway-events#thread-create) and [Message Create](https://discord.com/developers/docs/topics/gateway-events#message-create) Gateway event.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "name",
        "type": "string",
        "description": "1-100 character channel name",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "auto_archive_duration",
        "type": "integer",
        "description": "Duration in minutes to automatically archive the thread after recent activity, can be set to: 60, 1440, 4320, 10080",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "rate_limit_per_user",
        "type": "integer",
        "description": "Amount of seconds a user has to wait before sending another message (0-21600)",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "message",
        "type": "object",
        "description": "Contents of the first message in the forum thread",
        "optional": false,
        "isNullable": false,
        "object_reference": "forum_thread_message_param"
      },
      {
        "name": "applied_tags",
        "type": "array",
        "description": "The IDs of the set of tags that have been applied to a thread in a `GUILD_FORUM` channel",
        "optional": true,
        "isNullable": false,
        "schema": [
          {
            "type": "string"
          }
        ]
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/threadMembers/me/update",
    "title": "Join Thread",
    "method": "PUT",
    "url": "/channels/{channel_id}/thread-members/@me",
    "description": "Adds the current user to a thread\nAlso requires the thread is not archived. Returns a 204 empty response on success. Fires a [Thread Members Update](https://discord.com/developers/docs/topics/gateway-events#thread-members-update) and a [Thread Create](https://discord.com/developers/docs/topics/gateway-events#thread-create) Gateway event.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/threadMembers/create",
    "title": "Add Thread Member",
    "method": "PUT",
    "url": "/channels/{channel_id}/thread-members/{user_id}",
    "description": "Adds another member to a thread\nRequires the ability to send messages in the thread. Also requires the thread is not archived. Returns a 204 empty response if the member is successfully added or was already a member of the thread. Fires a [Thread Members Update](https://discord.com/developers/docs/topics/gateway-events#thread-members-update) Gateway event.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "user_id",
        "description": "The user's id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/threadMembers/me/destroy",
    "title": "Leave Thread",
    "method": "DELETE",
    "url": "/channels/{channel_id}/thread-members/@me",
    "description": "Removes the current user from a thread\nAlso requires the thread is not archived. Returns a 204 empty response on success. Fires a [Thread Members Update](https://discord.com/developers/docs/topics/gateway-events#thread-members-update) Gateway event.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/threadMembers/destroy",
    "title": "Remove Thread Member",
    "method": "DELETE",
    "url": "/channels/{channel_id}/thread-members/{user_id}",
    "description": "Removes another member from a thread\nRequires the `MANAGE_THREADS` permission, or the creator of the thread if it is a `PRIVATE_THREAD`. Also requires the thread is not archived. Returns a 204 empty response on success. Fires a [Thread Members Update](https://discord.com/developers/docs/topics/gateway-events#thread-members-update) Gateway event.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "user_id",
        "description": "The user's id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/threadMembers/retrieve",
    "title": "Get Thread Member",
    "method": "GET",
    "url": "/channels/{channel_id}/thread-members/{user_id}",
    "description": "Returns a [thread member](https://discord.com/developers/docs/resources/channel#thread-member-object) object for the specified user if they are a member of the thread, returns a 404 response otherwise.\n\nWhen `with_member` is set to `true`, the thread member object will include a `member` field containing a [guild member](https://discord.com/developers/docs/resources/guild#guild-member-object) object.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "user_id",
        "description": "The user's id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "with_member",
        "type": "boolean",
        "description": "Whether to include a [guild member](https://discord.com/developers/docs/resources/guild#guild-member-object) object for the thread member",
        "optional": true,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/threadMembers/list",
    "title": "List Thread Members",
    "method": "GET",
    "url": "/channels/{channel_id}/thread-members",
    "description": "Returns array of [thread members](https://discord.com/developers/docs/resources/channel#thread-member-object) objects that are members of the thread.\n\nWhen `with_member` is set to `true`, the results will be paginated and each thread member object will include a `member` field containing a [guild member](https://discord.com/developers/docs/resources/guild#guild-member-object) object.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "with_member",
        "type": "boolean",
        "description": "Whether to include a [guild member](https://discord.com/developers/docs/resources/guild#guild-member-object) object for each thread member",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "after",
        "type": "string",
        "description": "Get thread members after this user ID",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "limit",
        "type": "integer",
        "description": "Max number of thread members to return (1-100)\nDefaults to 100.",
        "optional": true,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/threads/archived/public/list",
    "title": "List Public Archived Threads",
    "method": "GET",
    "url": "/channels/{channel_id}/threads/archived/public",
    "description": "Returns archived threads in the channel that are public\nWhen called on a `GUILD_TEXT` channel, returns threads of [type](https://discord.com/developers/docs/resources/channel#channel-object-channel-types) `PUBLIC_THREAD`. When called on a `GUILD_ANNOUNCEMENT` channel returns threads of [type](https://discord.com/developers/docs/resources/channel#channel-object-channel-types) `ANNOUNCEMENT_THREAD`. Threads are ordered by `archive_timestamp`, in descending order. Requires the `READ_MESSAGE_HISTORY` permission.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "before",
        "type": "string",
        "description": "Returns threads before this timestamp",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "limit",
        "type": "integer",
        "description": "Optional maximum number of threads to return",
        "optional": true,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/threads/archived/private/list",
    "title": "List Private Archived Threads",
    "method": "GET",
    "url": "/channels/{channel_id}/threads/archived/private",
    "description": "Returns archived threads in the channel that are of [type](https://discord.com/developers/docs/resources/channel#channel-object-channel-types) `PRIVATE_THREAD`\nThreads are ordered by `archive_timestamp`, in descending order. Requires both the `READ_MESSAGE_HISTORY` and `MANAGE_THREADS` permissions.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "before",
        "type": "string",
        "description": "Returns threads before this timestamp",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "limit",
        "type": "integer",
        "description": "Optional maximum number of threads to return",
        "optional": true,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "channels",
    "name": "channels/users/me/threads/archived/private/list",
    "title": "List Joined Private Archived Threads",
    "method": "GET",
    "url": "/channels/{channel_id}/users/@me/threads/archived/private",
    "description": "Returns archived threads in the channel that are of [type](https://discord.com/developers/docs/resources/channel#channel-object-channel-types) `PRIVATE_THREAD`, and the user has joined\nThreads are ordered by their `id`, in descending order. Requires the `READ_MESSAGE_HISTORY` permission.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "before",
        "type": "string",
        "description": "Returns threads before this id",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "limit",
        "type": "integer",
        "description": "Optional maximum number of threads to return",
        "optional": true,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "emojis",
    "name": "guilds/emojis/list",
    "title": "List Guild Emojis",
    "method": "GET",
    "url": "/guilds/{guild_id}/emojis",
    "description": "Returns a list of [emoji](https://discord.com/developers/docs/resources/emoji#emoji-object) objects for the given guild.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "emojis",
    "name": "guilds/emojis/retrieve",
    "title": "Get Guild Emoji",
    "method": "GET",
    "url": "/guilds/{guild_id}/emojis/{emoji_id}",
    "description": "Returns an [emoji](https://discord.com/developers/docs/resources/emoji#emoji-object) object for the given guild and emoji IDs.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "emoji_id",
        "description": "[emoji id](https://discord.com/developers/docs/reference#image-formatting)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "emojis",
    "name": "guilds/emojis/create",
    "title": "Create Guild Emoji",
    "method": "POST",
    "url": "/guilds/{guild_id}/emojis",
    "description": "Create a new emoji for the guild\nRequires the `MANAGE_GUILD_EXPRESSIONS` permission. Returns the new [emoji](https://discord.com/developers/docs/resources/emoji#emoji-object) object on success. Fires a [Guild Emojis Update](https://discord.com/developers/docs/topics/gateway-events#guild-emojis-update) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "name",
        "type": "string",
        "description": "Name of the emoji",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "image",
        "type": "object",
        "description": "The 128x128 emoji image",
        "optional": false,
        "isNullable": false,
        "object_reference": "image_data"
      },
      {
        "name": "roles",
        "type": "array",
        "description": "Roles allowed to use this emoji",
        "optional": false,
        "isNullable": false,
        "schema": [
          {
            "type": "string"
          }
        ]
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "emojis",
    "name": "guilds/emojis/update",
    "title": "Modify Guild Emoji",
    "method": "PATCH",
    "url": "/guilds/{guild_id}/emojis/{emoji_id}",
    "description": "Modify the given emoji\nRequires the `MANAGE_GUILD_EXPRESSIONS` permission. Returns the updated [emoji](https://discord.com/developers/docs/resources/emoji#emoji-object) object on success. Fires a [Guild Emojis Update](https://discord.com/developers/docs/topics/gateway-events#guild-emojis-update) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "emoji_id",
        "description": "[emoji id](https://discord.com/developers/docs/reference#image-formatting)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "name",
        "type": "string",
        "description": "Name of the emoji",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "roles",
        "type": "array",
        "description": "Roles allowed to use this emoji",
        "optional": false,
        "isNullable": true,
        "schema": [
          {
            "type": "string"
          }
        ]
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "emojis",
    "name": "guilds/emojis/destroy",
    "title": "Delete Guild Emoji",
    "method": "DELETE",
    "url": "/guilds/{guild_id}/emojis/{emoji_id}",
    "description": "Delete the given emoji\nRequires the `MANAGE_GUILD_EXPRESSIONS` permission. Returns `204 No Content` on success. Fires a [Guild Emojis Update](https://discord.com/developers/docs/topics/gateway-events#guild-emojis-update) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "emoji_id",
        "description": "[emoji id](https://discord.com/developers/docs/reference#image-formatting)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/create",
    "title": "Create Guild",
    "method": "POST",
    "url": "/guilds",
    "description": "Create a new guild\nReturns a [guild](https://discord.com/developers/docs/resources/guild#guild-object) object on success. Fires a [Guild Create](https://discord.com/developers/docs/topics/gateway-events#guild-create) Gateway event.",
    "pathParams": [],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "name",
        "type": "string",
        "description": "Name of the guild (2-100 characters)",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "region",
        "type": "string",
        "description": "[voice region](#https://discord.com/developers/docs/resources/voicevoice-region-object) id (deprecated)",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "icon",
        "type": "object",
        "description": "Base64 128x128 image for the guild icon",
        "optional": true,
        "isNullable": false,
        "object_reference": "image_data"
      },
      {
        "name": "verification_level",
        "type": "integer",
        "description": "[verification level](https://discord.com/developers/docs/resources/guild#guild-object-verification-level)",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "default_message_notifications",
        "type": "integer",
        "description": "Default [message notification level](https://discord.com/developers/docs/resources/guild#guild-object-default-message-notification-level)",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "explicit_content_filter",
        "type": "integer",
        "description": "[explicit content filter level](https://discord.com/developers/docs/resources/guild#guild-object-explicit-content-filter-level)",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "roles",
        "type": "array",
        "description": "New guild roles",
        "optional": true,
        "isNullable": false,
        "schema": [
          {
            "type": "object",
            "object_reference": "role"
          }
        ]
      },
      {
        "name": "channels",
        "type": "array",
        "description": "New guild's channels",
        "optional": true,
        "isNullable": false,
        "schema": [
          {
            "type": "object",
            "partial_object_reference": "channel"
          }
        ]
      },
      {
        "name": "afk_channel_id",
        "type": "string",
        "description": "Id for afk channel",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "afk_timeout",
        "type": "integer",
        "description": "Afk timeout in seconds, can be set to: 60, 300, 900, 1800, 3600",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "system_channel_id",
        "type": "string",
        "description": "The id of the channel where guild notices such as welcome messages and boost events are posted",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "system_channel_flags",
        "type": "integer",
        "description": "[system channel flags](https://discord.com/developers/docs/resources/guild#guild-object-system-channel-flags)",
        "optional": true,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/retrieve",
    "title": "Get Guild",
    "method": "GET",
    "url": "/guilds/{guild_id}",
    "description": "Returns the [guild](https://discord.com/developers/docs/resources/guild#guild-object) object for the given id\nIf `with_counts` is set to `true`, this endpoint will also return `approximate_member_count` and `approximate_presence_count` for the guild.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "with_counts",
        "type": "boolean",
        "description": "When `true`, will return approximate member and presence counts for the guild",
        "default": "false",
        "optional": true,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/preview/retrieve",
    "title": "Get Guild Preview",
    "method": "GET",
    "url": "/guilds/{guild_id}/preview",
    "description": "Returns the [guild preview](https://discord.com/developers/docs/resources/guild#guild-preview-object) object for the given id\nIf the user is not in the guild, then the guild must be lurkable.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/update",
    "title": "Modify Guild",
    "method": "PATCH",
    "url": "/guilds/{guild_id}",
    "description": "Modify a guild's settings\nRequires the `MANAGE_GUILD` permission. Returns the updated [guild](https://discord.com/developers/docs/resources/guild#guild-object) object on success. Fires a [Guild Update](https://discord.com/developers/docs/topics/gateway-events#guild-update) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "name",
        "type": "string",
        "description": "Guild name",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "region",
        "type": "string",
        "description": "Guild [voice region](#https://discord.com/developers/docs/resources/voicevoice-region-object) id (deprecated)",
        "optional": false,
        "isNullable": true
      },
      {
        "name": "verification_level",
        "type": "integer",
        "description": "[verification level](https://discord.com/developers/docs/resources/guild#guild-object-verification-level)",
        "optional": false,
        "isNullable": true
      },
      {
        "name": "default_message_notifications",
        "type": "integer",
        "description": "Default [message notification level](https://discord.com/developers/docs/resources/guild#guild-object-default-message-notification-level)",
        "optional": false,
        "isNullable": true
      },
      {
        "name": "explicit_content_filter",
        "type": "integer",
        "description": "[explicit content filter level](https://discord.com/developers/docs/resources/guild#guild-object-explicit-content-filter-level)",
        "optional": false,
        "isNullable": true
      },
      {
        "name": "afk_channel_id",
        "type": "string",
        "description": "Id for afk channel",
        "optional": false,
        "isNullable": true
      },
      {
        "name": "afk_timeout",
        "type": "integer",
        "description": "Afk timeout in seconds, can be set to: 60, 300, 900, 1800, 3600",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "icon",
        "type": "object",
        "description": "Base64 1024x1024 png/jpeg/gif image for the guild icon (can be animated gif when the server has the `ANIMATED_ICON` feature)",
        "optional": false,
        "isNullable": true,
        "object_reference": "image_data"
      },
      {
        "name": "owner_id",
        "type": "string",
        "description": "User id to transfer guild ownership to (must be owner)",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "splash",
        "type": "object",
        "description": "Base64 16:9 png/jpeg image for the guild splash (when the server has the `INVITE_SPLASH` feature)",
        "optional": false,
        "isNullable": true,
        "object_reference": "image_data"
      },
      {
        "name": "discovery_splash",
        "type": "object",
        "description": "Base64 16:9 png/jpeg image for the guild discovery splash (when the server has the `DISCOVERABLE` feature)",
        "optional": false,
        "isNullable": true,
        "object_reference": "image_data"
      },
      {
        "name": "banner",
        "type": "object",
        "description": "Base64 16:9 png/jpeg image for the guild banner (when the server has the `BANNER` feature; can be animated gif when the server has the `ANIMATED_BANNER` feature)",
        "optional": false,
        "isNullable": true,
        "object_reference": "image_data"
      },
      {
        "name": "system_channel_id",
        "type": "string",
        "description": "The id of the channel where guild notices such as welcome messages and boost events are posted",
        "optional": false,
        "isNullable": true
      },
      {
        "name": "system_channel_flags",
        "type": "integer",
        "description": "[system channel flags](https://discord.com/developers/docs/resources/guild#guild-object-system-channel-flags)",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "rules_channel_id",
        "type": "string",
        "description": "The id of the channel where Community guilds display rules and/or guidelines",
        "optional": false,
        "isNullable": true
      },
      {
        "name": "public_updates_channel_id",
        "type": "string",
        "description": "The id of the channel where admins and moderators of Community guilds receive notices from Discord",
        "optional": false,
        "isNullable": true
      },
      {
        "name": "preferred_locale",
        "type": "string",
        "description": "The preferred [locale](https://discord.com/developers/docs/reference#locales) of a Community guild used in server discovery and notices from Discord; defaults to \"en-US\"",
        "optional": false,
        "isNullable": true
      },
      {
        "name": "features",
        "type": "array",
        "description": "Enabled guild features",
        "optional": false,
        "isNullable": false,
        "schema": [
          {
            "type": "string",
            "enum_reference": "guild_feature"
          }
        ]
      },
      {
        "name": "description",
        "type": "string",
        "description": "The description for the guild",
        "optional": false,
        "isNullable": true
      },
      {
        "name": "premium_progress_bar_enabled",
        "type": "boolean",
        "description": "Whether the guild's boost progress bar should be enabled",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "safety_alerts_channel_id",
        "type": "string",
        "description": "The id of the channel where admins and moderators of Community guilds receive safety alerts from Discord",
        "optional": false,
        "isNullable": true
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/destroy",
    "title": "Delete Guild",
    "method": "DELETE",
    "url": "/guilds/{guild_id}",
    "description": "Delete a guild permanently\nUser must be owner. Returns `204 No Content` on success. Fires a [Guild Delete](https://discord.com/developers/docs/topics/gateway-events#guild-delete) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/channels/list",
    "title": "Get Guild Channels",
    "method": "GET",
    "url": "/guilds/{guild_id}/channels",
    "description": "Returns a list of guild [channel](https://discord.com/developers/docs/resources/channel#channel-object) objects\nDoes not include threads.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/channels/create",
    "title": "Create Guild Channel",
    "method": "POST",
    "url": "/guilds/{guild_id}/channels",
    "description": "Create a new [channel](https://discord.com/developers/docs/resources/channel#channel-object) object for the guild\nRequires the `MANAGE_CHANNELS` permission. If setting permission overwrites, only permissions your bot has in the guild can be allowed/denied. Setting `MANAGE_ROLES` permission in channels is only possible for guild administrators. Returns the new [channel](https://discord.com/developers/docs/resources/channel#channel-object) object on success. Fires a [Channel Create](https://discord.com/developers/docs/topics/gateway-events#channel-create) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "name",
        "type": "string",
        "description": "Channel name (1-100 characters)",
        "channel type": "All",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "type",
        "type": "integer",
        "description": "The [type of channel](https://discord.com/developers/docs/resources/channel#channel-object-channel-types)",
        "channel type": "All",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "topic",
        "type": "string",
        "description": "Channel topic (0-1024 characters)",
        "channel type": "Text, Announcement, Forum",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "bitrate",
        "type": "integer",
        "description": "The bitrate (in bits) of the voice or stage channel; min 8000",
        "channel type": "Voice, Stage",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "user_limit",
        "type": "integer",
        "description": "The user limit of the voice channel",
        "channel type": "Voice, Stage",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "rate_limit_per_user",
        "type": "integer",
        "description": "Amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission `manage_messages` or `manage_channel`, are unaffected",
        "channel type": "Text, Voice, Stage, Forum",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "position",
        "type": "integer",
        "description": "Sorting position of the channel",
        "channel type": "All",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "permission_overwrites",
        "type": "array",
        "description": "The channel's permission overwrites",
        "channel type": "All",
        "optional": false,
        "isNullable": false,
        "schema": [
          {
            "type": "object",
            "partial_object_reference": "overwrite"
          }
        ]
      },
      {
        "name": "parent_id",
        "type": "string",
        "description": "Id of the parent category for a channel",
        "channel type": "Text, Voice, Announcement, Stage, Forum",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "nsfw",
        "type": "boolean",
        "description": "Whether the channel is nsfw",
        "channel type": "Text, Voice, Announcement, Stage, Forum",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "rtc_region",
        "type": "string",
        "description": "Channel [voice region](#https://discord.com/developers/docs/resources/voicevoice-region-object) id of the voice or stage channel, automatic when set to null",
        "channel type": "Voice, Stage",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "video_quality_mode",
        "type": "integer",
        "description": "The camera [video quality mode](https://discord.com/developers/docs/resources/channel#channel-object-video-quality-modes) of the voice channel",
        "channel type": "Voice, Stage",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "default_auto_archive_duration",
        "type": "integer",
        "description": "The default duration that the clients use (not the API) for newly created threads in the channel, in minutes, to automatically archive the thread after recent activity",
        "channel type": "Text, Announcement, Forum",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "default_reaction_emoji",
        "type": "object",
        "description": "Emoji to show in the add reaction button on a thread in a `GUILD_FORUM` channel",
        "channel type": "Forum",
        "optional": false,
        "isNullable": false,
        "object_reference": "default_reaction"
      },
      {
        "name": "available_tags",
        "type": "array",
        "description": "Set of tags that can be used in a `GUILD_FORUM` channel",
        "channel type": "Forum",
        "optional": false,
        "isNullable": false,
        "schema": [
          {
            "type": "object",
            "object_reference": "tag"
          }
        ]
      },
      {
        "name": "default_sort_order",
        "type": "integer",
        "description": "The [default sort order type](https://discord.com/developers/docs/resources/channel#channel-object-sort-order-types) used to order posts in `GUILD_FORUM` channels",
        "channel type": "Forum",
        "optional": false,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/channels/update",
    "title": "Modify Guild Channel Positions",
    "method": "PATCH",
    "url": "/guilds/{guild_id}/channels",
    "description": "Modify the positions of a set of [channel](https://discord.com/developers/docs/resources/channel#channel-object) objects for the guild\nRequires `MANAGE_CHANNELS` permission. Returns a 204 empty response on success. Fires multiple [Channel Update](https://discord.com/developers/docs/topics/gateway-events#channel-update) Gateway events.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/threads/active/retrieve",
    "title": "List Active Guild Threads",
    "method": "GET",
    "url": "/guilds/{guild_id}/threads/active",
    "description": "Returns all active threads in the guild, including public and private threads\nThreads are ordered by their `id`, in descending order.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/members/retrieve",
    "title": "Get Guild Member",
    "method": "GET",
    "url": "/guilds/{guild_id}/members/{user_id}",
    "description": "Returns a [guild member](https://discord.com/developers/docs/resources/guild#guild-member-object) object for the specified user.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "user_id",
        "description": "The user's id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/members/list",
    "title": "List Guild Members",
    "method": "GET",
    "url": "/guilds/{guild_id}/members",
    "description": "Returns a list of [guild member](https://discord.com/developers/docs/resources/guild#guild-member-object) objects that are members of the guild.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "limit",
        "type": "integer",
        "description": "Max number of members to return (1-1000)",
        "default": "1",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "after",
        "type": "string",
        "description": "The highest user id in the previous page",
        "default": "0",
        "optional": false,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/members/search/",
    "title": "Search Guild Members",
    "method": "GET",
    "url": "/guilds/{guild_id}/members/search",
    "description": "Returns a list of [guild member](https://discord.com/developers/docs/resources/guild#guild-member-object) objects whose username or nickname starts with a provided string.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "query",
        "type": "string",
        "description": "Query string to match username(s) and nickname(s) against.",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "limit",
        "type": "integer",
        "description": "Max number of members to return (1-1000)",
        "default": "1",
        "optional": false,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/members/create",
    "title": "Add Guild Member",
    "method": "PUT",
    "url": "/guilds/{guild_id}/members/{user_id}",
    "description": "Adds a user to the guild, provided you have a valid oauth2 access token for the user with the `guilds.join` scope\nReturns a 201 Created with the [guild member](https://discord.com/developers/docs/resources/guild#guild-member-object) as the body, or 204 No Content if the user is already a member of the guild. Fires a [Guild Member Add](https://discord.com/developers/docs/topics/gateway-events#guild-member-add) Gateway event.\n\nFor guilds with [Membership Screening](https://discord.com/developers/docs/resources/guild#membership-screening-object) enabled, this endpoint will default to adding new members as `pending` in the [guild member object](https://discord.com/developers/docs/resources/guild#guild-member-object). Members that are `pending` will have to complete membership screening before they become full members that can talk.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "user_id",
        "description": "The user's id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "access_token",
        "type": "string",
        "description": "An oauth2 access token granted with the `guilds.join` to the bot's application for the user you want to add to the guild",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "nick",
        "type": "string",
        "description": "Value to set user's nickname to",
        "permission": "MANAGE_NICKNAMES",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "roles",
        "type": "array",
        "description": "Array of role ids the member is assigned",
        "permission": "MANAGE_ROLES",
        "optional": false,
        "isNullable": false,
        "schema": [
          {
            "type": "string"
          }
        ]
      },
      {
        "name": "mute",
        "type": "boolean",
        "description": "Whether the user is muted in voice channels",
        "permission": "MUTE_MEMBERS",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "deaf",
        "type": "boolean",
        "description": "Whether the user is deafened in voice channels",
        "permission": "DEAFEN_MEMBERS",
        "optional": false,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/members/update",
    "title": "Modify Guild Member",
    "method": "PATCH",
    "url": "/guilds/{guild_id}/members/{user_id}",
    "description": "Modify attributes of a [guild member](https://discord.com/developers/docs/resources/guild#guild-member-object)\nReturns a 200 OK with the [guild member](https://discord.com/developers/docs/resources/guild#guild-member-object) as the body. Fires a [Guild Member Update](https://discord.com/developers/docs/topics/gateway-events#guild-member-update) Gateway event. If the `channel_id` is set to null, this will force the target user to be disconnected from voice.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "user_id",
        "description": "The user's id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "nick",
        "type": "string",
        "description": "Value to set user's nickname to",
        "permission": "MANAGE_NICKNAMES",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "roles",
        "type": "array",
        "description": "Array of role ids the member is assigned",
        "permission": "MANAGE_ROLES",
        "optional": false,
        "isNullable": false,
        "schema": [
          {
            "type": "string"
          }
        ]
      },
      {
        "name": "mute",
        "type": "boolean",
        "description": "Whether the user is muted in voice channels\nWill throw a 400 error if the user is not in a voice channel",
        "permission": "MUTE_MEMBERS",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "deaf",
        "type": "boolean",
        "description": "Whether the user is deafened in voice channels\nWill throw a 400 error if the user is not in a voice channel",
        "permission": "DEAFEN_MEMBERS",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "channel_id",
        "type": "string",
        "description": "Id of channel to move user to (if they are connected to voice)",
        "permission": "MOVE_MEMBERS",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "communication_disabled_until",
        "type": "string",
        "description": "When the user's [timeout](https://support.discord.com/hc/en-us/articles/4413305239191-Time-Out-FAQ) will expire and the user will be able to communicate in the guild again (up to 28 days in the future), set to null to remove timeout\nWill throw a 403 error if the user has the ADMINISTRATOR permission or is the owner of the guild",
        "permission": "MODERATE_MEMBERS",
        "optional": false,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/members/me/update",
    "title": "Modify Current Member",
    "method": "PATCH",
    "url": "/guilds/{guild_id}/members/@me",
    "description": "Modifies the current member in a guild\nReturns a 200 with the updated member object on success. Fires a [Guild Member Update](https://discord.com/developers/docs/topics/gateway-events#guild-member-update) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "nick",
        "type": "string",
        "description": "Value to set user's nickname to",
        "permission": "CHANGE_NICKNAME",
        "optional": true,
        "isNullable": true
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/members/me/nick/update",
    "title": "Modify Current User Nick",
    "method": "PATCH",
    "url": "/guilds/{guild_id}/members/@me/nick",
    "description": "Modifies the nickname of the current user in a guild\nReturns a 200 with the nickname on success. Fires a [Guild Member Update](https://discord.com/developers/docs/topics/gateway-events#guild-member-update) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "nick",
        "type": "string",
        "description": "Value to set user's nickname to",
        "permission": "CHANGE_NICKNAME",
        "optional": true,
        "isNullable": true
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/members/roles/create",
    "title": "Add Guild Member Role",
    "method": "PUT",
    "url": "/guilds/{guild_id}/members/{user_id}/roles/{role_id}",
    "description": "Adds a role to a [guild member](https://discord.com/developers/docs/resources/guild#guild-member-object)\nRequires the `MANAGE_ROLES` permission. Returns a 204 empty response on success. Fires a [Guild Member Update](https://discord.com/developers/docs/topics/gateway-events#guild-member-update) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "user_id",
        "description": "The user's id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "role_id",
        "description": "Role id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/members/roles/destroy",
    "title": "Remove Guild Member Role",
    "method": "DELETE",
    "url": "/guilds/{guild_id}/members/{user_id}/roles/{role_id}",
    "description": "Removes a role from a [guild member](https://discord.com/developers/docs/resources/guild#guild-member-object)\nRequires the `MANAGE_ROLES` permission. Returns a 204 empty response on success. Fires a [Guild Member Update](https://discord.com/developers/docs/topics/gateway-events#guild-member-update) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "user_id",
        "description": "The user's id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "role_id",
        "description": "Role id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/members/destroy",
    "title": "Remove Guild Member",
    "method": "DELETE",
    "url": "/guilds/{guild_id}/members/{user_id}",
    "description": "Remove a member from a guild\nRequires `KICK_MEMBERS` permission. Returns a 204 empty response on success. Fires a [Guild Member Remove](https://discord.com/developers/docs/topics/gateway-events#guild-member-remove) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "user_id",
        "description": "The user's id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/bans/list",
    "title": "Get Guild Bans",
    "method": "GET",
    "url": "/guilds/{guild_id}/bans",
    "description": "Returns a list of [ban](https://discord.com/developers/docs/resources/guild#ban-object) objects for the users banned from this guild\nRequires the `BAN_MEMBERS` permission.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "limit",
        "type": "float",
        "description": "Number of users to return (up to maximum 1000)",
        "default": "1000",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "before",
        "type": "string",
        "description": "Consider only users before given user id",
        "default": "null",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "after",
        "type": "string",
        "description": "Consider only users after given user id",
        "default": "null",
        "optional": true,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/bans/retrieve",
    "title": "Get Guild Ban",
    "method": "GET",
    "url": "/guilds/{guild_id}/bans/{user_id}",
    "description": "Returns a [ban](https://discord.com/developers/docs/resources/guild#ban-object) object for the given user or a 404 not found if the ban cannot be found\nRequires the `BAN_MEMBERS` permission.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "user_id",
        "description": "The user's id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/bans/update",
    "title": "Create Guild Ban",
    "method": "PUT",
    "url": "/guilds/{guild_id}/bans/{user_id}",
    "description": "Create a guild ban, and optionally delete previous messages sent by the banned user\nRequires the `BAN_MEMBERS` permission. Returns a 204 empty response on success. Fires a [Guild Ban Add](https://discord.com/developers/docs/topics/gateway-events#guild-ban-add) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "user_id",
        "description": "The user's id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "delete_message_days",
        "type": "integer",
        "description": "Number of days to delete messages for (0-7) (deprecated)",
        "default": "0",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "delete_message_seconds",
        "type": "integer",
        "description": "Number of seconds to delete messages for, between 0 and 604800 (7 days)",
        "default": "0",
        "optional": true,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/bans/destroy",
    "title": "Remove Guild Ban",
    "method": "DELETE",
    "url": "/guilds/{guild_id}/bans/{user_id}",
    "description": "Remove the ban for a user\nRequires the `BAN_MEMBERS` permissions. Returns a 204 empty response on success. Fires a [Guild Ban Remove](https://discord.com/developers/docs/topics/gateway-events#guild-ban-remove) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "user_id",
        "description": "The user's id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/roles/list",
    "title": "Get Guild Roles",
    "method": "GET",
    "url": "/guilds/{guild_id}/roles",
    "description": "Returns a list of [role](https://discord.com/developers/docs/topics/permissions#role-object) objects for the guild.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/roles/create",
    "title": "Create Guild Role",
    "method": "POST",
    "url": "/guilds/{guild_id}/roles",
    "description": "Create a new [role](https://discord.com/developers/docs/topics/permissions#role-object) for the guild\nRequires the `MANAGE_ROLES` permission. Returns the new [role](https://discord.com/developers/docs/topics/permissions#role-object) object on success. Fires a [Guild Role Create](https://discord.com/developers/docs/topics/gateway-events#guild-role-create) Gateway event. All JSON params are optional.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "name",
        "type": "string",
        "description": "Name of the role, max 100 characters",
        "default": "\"new role\"",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "permissions",
        "type": "string",
        "description": "Bitwise value of the enabled/disabled permissions",
        "default": "@everyone permissions in guild",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "color",
        "type": "integer",
        "description": "RGB color value",
        "default": "0",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "hoist",
        "type": "boolean",
        "description": "Whether the role should be displayed separately in the sidebar",
        "default": "false",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "icon",
        "type": "object",
        "description": "The role's icon image (if the guild has the `ROLE_ICONS` feature)",
        "default": "null",
        "optional": false,
        "isNullable": true,
        "object_reference": "image_data"
      },
      {
        "name": "unicode_emoji",
        "type": "string",
        "description": "The role's unicode emoji as a [standard emoji](https://discord.com/developers/docs/reference#message-formatting) (if the guild has the `ROLE_ICONS` feature)",
        "default": "null",
        "optional": false,
        "isNullable": true
      },
      {
        "name": "mentionable",
        "type": "boolean",
        "description": "Whether the role should be mentionable",
        "default": "false",
        "optional": false,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/roles/positions/update",
    "title": "Modify Guild Role Positions",
    "method": "PATCH",
    "url": "/guilds/{guild_id}/roles",
    "description": "Modify the positions of a set of [role](https://discord.com/developers/docs/topics/permissions#role-object) objects for the guild\nRequires the `MANAGE_ROLES` permission. Returns a list of all of the guild's [role](https://discord.com/developers/docs/topics/permissions#role-object) objects on success. Fires multiple [Guild Role Update](https://discord.com/developers/docs/topics/gateway-events#guild-role-update) Gateway events.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/roles/update",
    "title": "Modify Guild Role",
    "method": "PATCH",
    "url": "/guilds/{guild_id}/roles/{role_id}",
    "description": "Modify a guild role\nRequires the `MANAGE_ROLES` permission. Returns the updated [role](https://discord.com/developers/docs/topics/permissions#role-object) on success. Fires a [Guild Role Update](https://discord.com/developers/docs/topics/gateway-events#guild-role-update) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "role_id",
        "description": "Role id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "name",
        "type": "string",
        "description": "Name of the role, max 100 characters",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "permissions",
        "type": "string",
        "description": "Bitwise value of the enabled/disabled permissions",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "color",
        "type": "integer",
        "description": "RGB color value",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "hoist",
        "type": "boolean",
        "description": "Whether the role should be displayed separately in the sidebar",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "icon",
        "type": "object",
        "description": "The role's icon image (if the guild has the `ROLE_ICONS` feature)",
        "optional": false,
        "isNullable": false,
        "object_reference": "image_data"
      },
      {
        "name": "unicode_emoji",
        "type": "string",
        "description": "The role's unicode emoji as a [standard emoji](https://discord.com/developers/docs/reference#message-formatting) (if the guild has the `ROLE_ICONS` feature)",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "mentionable",
        "type": "boolean",
        "description": "Whether the role should be mentionable",
        "optional": false,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/mfa/create",
    "title": "Modify Guild MFA Level",
    "method": "POST",
    "url": "/guilds/{guild_id}/mfa",
    "description": "Modify a guild's MFA level\nRequires guild ownership. Returns the updated [level](https://discord.com/developers/docs/resources/guild#guild-object-mfa-level) on success. Fires a [Guild Update](https://discord.com/developers/docs/topics/gateway-events#guild-update) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "level",
        "type": "integer",
        "description": "[MFA level](https://discord.com/developers/docs/resources/guild#guild-object-mfa-level)",
        "optional": false,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/roles/destroy",
    "title": "Delete Guild Role",
    "method": "DELETE",
    "url": "/guilds/{guild_id}/roles/{role_id}",
    "description": "Delete a guild role\nRequires the `MANAGE_ROLES` permission. Returns a 204 empty response on success. Fires a [Guild Role Delete](https://discord.com/developers/docs/topics/gateway-events#guild-role-delete) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "role_id",
        "description": "Role id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/prune/retrieve",
    "title": "Get Guild Prune Count",
    "method": "GET",
    "url": "/guilds/{guild_id}/prune",
    "description": "Returns an object with one `pruned` key indicating the number of members that would be removed in a prune operation\nRequires the `KICK_MEMBERS` permission.\n\nBy default, prune will not remove users with roles. You can optionally include specific roles in your prune by providing the `include_roles` parameter. Any inactive user that has a subset of the provided role(s) will be counted in the prune and users with additional roles will not.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "days",
        "type": "integer",
        "description": "Number of days to count prune for (1-30)",
        "default": "7",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "include_roles",
        "type": "string",
        "description": "Role(s) to include",
        "default": "none",
        "optional": false,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/prune/create",
    "title": "Begin Guild Prune",
    "method": "POST",
    "url": "/guilds/{guild_id}/prune",
    "description": "Begin a prune operation\nRequires the `KICK_MEMBERS` permission. Returns an object with one `pruned` key indicating the number of members that were removed in the prune operation. For large guilds it's recommended to set the `compute_prune_count` option to `false`, forcing `pruned` to `null`. Fires multiple [Guild Member Remove](https://discord.com/developers/docs/topics/gateway-events#guild-member-remove) Gateway events.\n\nBy default, prune will not remove users with roles. You can optionally include specific roles in your prune by providing the `include_roles` parameter. Any inactive user that has a subset of the provided role(s) will be included in the prune and users with additional roles will not.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "days",
        "type": "integer",
        "description": "Number of days to prune (1-30)",
        "default": "7",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "compute_prune_count",
        "type": "boolean",
        "description": "Whether `pruned` is returned, discouraged for large guilds",
        "default": "true",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "include_roles",
        "type": "array",
        "description": "Role(s) to include",
        "default": "none",
        "optional": false,
        "isNullable": false,
        "schema": [
          {
            "type": "string"
          }
        ]
      },
      {
        "name": "reason",
        "type": "string",
        "description": "Reason for the prune (deprecated)",
        "optional": true,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/regions/list",
    "title": "Get Guild Voice Regions",
    "method": "GET",
    "url": "/guilds/{guild_id}/regions",
    "description": "Returns a list of [voice region](#https://discord.com/developers/docs/resources/voicevoice-region-object) objects for the guild\nUnlike the similar `/voice` route, this returns VIP servers when the guild is VIP-enabled.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/invites/list",
    "title": "Get Guild Invites",
    "method": "GET",
    "url": "/guilds/{guild_id}/invites",
    "description": "Returns a list of [invite](https://discord.com/developers/docs/resources/invite#invite-object) objects (with [invite metadata](https://discord.com/developers/docs/resources/invite#invite-metadata-object)) for the guild\nRequires the `MANAGE_GUILD` permission.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/integrations/list",
    "title": "Get Guild Integrations",
    "method": "GET",
    "url": "/guilds/{guild_id}/integrations",
    "description": "Returns a list of [integration](https://discord.com/developers/docs/resources/guild#integration-object) objects for the guild\nRequires the `MANAGE_GUILD` permission.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/integrations/destroy",
    "title": "Delete Guild Integration",
    "method": "DELETE",
    "url": "/guilds/{guild_id}/integrations/{integration_id}",
    "description": "Delete the attached [integration](https://discord.com/developers/docs/resources/guild#integration-object) object for the guild\nDeletes any associated webhooks and kicks the associated bot if there is one. Requires the `MANAGE_GUILD` permission. Returns a 204 empty response on success. Fires [Guild Integrations Update](https://discord.com/developers/docs/topics/gateway-events#guild-integrations-update) and [Integration Delete](https://discord.com/developers/docs/topics/gateway-events#integration-delete) Gateway events.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "integration_id",
        "description": "Integration id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/widget/retrieve",
    "title": "Get Guild Widget Settings",
    "method": "GET",
    "url": "/guilds/{guild_id}/widget",
    "description": "Returns a [guild widget settings](https://discord.com/developers/docs/resources/guild#guild-widget-settings-object) object\nRequires the `MANAGE_GUILD` permission.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/widget/update",
    "title": "Modify Guild Widget",
    "method": "PATCH",
    "url": "/guilds/{guild_id}/widget",
    "description": "Modify a [guild widget settings](https://discord.com/developers/docs/resources/guild#guild-widget-settings-object) object for the guild\nAll attributes may be passed in with JSON and modified. Requires the `MANAGE_GUILD` permission. Returns the updated [guild widget](https://discord.com/developers/docs/resources/guild#guild-widget-settings-object) object.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/widget/data/retrieve",
    "title": "Get Guild Widget",
    "method": "GET",
    "url": "/guilds/{guild_id}/widget.json",
    "description": "Returns the [widget](https://discord.com/developers/docs/resources/guild#guild-widget-object) for the guild.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/vanityUrl/retrieve",
    "title": "Get Guild Vanity URL",
    "method": "GET",
    "url": "/guilds/{guild_id}/vanity-url",
    "description": "Returns a partial [invite](https://discord.com/developers/docs/resources/invite#invite-object) object for guilds with that feature enabled\nRequires the `MANAGE_GUILD` permission. `code` will be null if a vanity url for the guild is not set.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/widget/image/retrieve",
    "title": "Get Guild Widget Image",
    "method": "GET",
    "url": "/guilds/{guild_id}/widget.png",
    "description": "Returns a PNG image widget for the guild\nRequires no permissions or authentication.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "style",
        "type": "string",
        "description": "Style of the widget image returned (see below)",
        "default": "shield",
        "optional": false,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/welcomeScreen/retrieve",
    "title": "Get Guild Welcome Screen",
    "method": "GET",
    "url": "/guilds/{guild_id}/welcome-screen",
    "description": "Returns the [Welcome Screen](https://discord.com/developers/docs/resources/guild#welcome-screen-object) object for the guild\nIf the welcome screen is not enabled, the `MANAGE_GUILD` permission is required.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/welcomeScreen/update",
    "title": "Modify Guild Welcome Screen",
    "method": "PATCH",
    "url": "/guilds/{guild_id}/welcome-screen",
    "description": "Modify the guild's [Welcome Screen](https://discord.com/developers/docs/resources/guild#welcome-screen-object)\nRequires the `MANAGE_GUILD` permission. Returns the updated [Welcome Screen](https://discord.com/developers/docs/resources/guild#welcome-screen-object) object. May fire a [Guild Update](https://discord.com/developers/docs/topics/gateway-events#guild-update) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "enabled",
        "type": "boolean",
        "description": "Whether the welcome screen is enabled",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "welcome_channels",
        "type": "array",
        "description": "Channels linked in the welcome screen and their display options",
        "optional": false,
        "isNullable": false,
        "schema": [
          {
            "type": "object",
            "object_reference": "welcome_screen_channel"
          }
        ]
      },
      {
        "name": "description",
        "type": "string",
        "description": "The server description to show in the welcome screen",
        "optional": false,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/onboarding/retrieve",
    "title": "Get Guild Onboarding",
    "method": "GET",
    "url": "/guilds/{guild_id}/onboarding",
    "description": "Returns the [Onboarding](https://discord.com/developers/docs/resources/guild#guild-onboarding-object) object for the guild.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/voiceStates/me/update",
    "title": "Modify Current User Voice State",
    "method": "PATCH",
    "url": "/guilds/{guild_id}/voice-states/@me",
    "description": "Updates the current user's voice state\nReturns `204 No Content` on success. Fires a [Voice State Update](https://discord.com/developers/docs/topics/gateway-events#voice-state-update) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "channel_id",
        "type": "string",
        "description": "The id of the channel the user is currently in",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "suppress",
        "type": "boolean",
        "description": "Toggles the user's suppress state",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "request_to_speak_timestamp",
        "type": "string",
        "description": "Sets the user's request to speak",
        "optional": true,
        "isNullable": true
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guilds",
    "name": "guilds/voiceStates/update",
    "title": "Modify User Voice State",
    "method": "PATCH",
    "url": "/guilds/{guild_id}/voice-states/{user_id}",
    "description": "Updates another user's voice state\nFires a [Voice State Update](https://discord.com/developers/docs/topics/gateway-events#voice-state-update) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "user_id",
        "description": "The user's id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "channel_id",
        "type": "string",
        "description": "The id of the channel the user is currently in",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "suppress",
        "type": "boolean",
        "description": "Toggles the user's suppress state",
        "optional": true,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guild_scheduled_events",
    "name": "guilds/scheduledEvents/list",
    "title": "List Scheduled Events for Guild",
    "method": "GET",
    "url": "/guilds/{guild_id}/scheduled-events",
    "description": "Returns a list of [guild scheduled event](https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object) objects for the given guild.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "with_user_count",
        "type": "boolean",
        "description": "Include number of users subscribed to each event",
        "optional": true,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "guild_scheduled_events",
    "name": "guilds/scheduledEvents/create",
    "title": "Create Guild Scheduled Event",
    "method": "POST",
    "url": "/guilds/{guild_id}/scheduled-events",
    "description": "Create a guild scheduled event in the guild\nReturns a [guild scheduled event](https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object) object on success. Fires a [Guild Scheduled Event Create](https://discord.com/developers/docs/topics/gateway-events#guild-scheduled-event-create) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "channel_id",
        "type": "string",
        "description": "The channel id of the scheduled event.",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "entity_metadata",
        "type": "object",
        "description": "The entity metadata of the scheduled event",
        "optional": true,
        "isNullable": false,
        "object_reference": "entity_metadata"
      },
      {
        "name": "name",
        "type": "string",
        "description": "The name of the scheduled event",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "privacy_level",
        "type": "integer",
        "description": "The privacy level of the scheduled event",
        "optional": false,
        "isNullable": false,
        "enum_reference": "guild_scheduled_event_privacy_level"
      },
      {
        "name": "scheduled_start_time",
        "type": "string",
        "description": "The time to schedule the scheduled event",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "scheduled_end_time",
        "type": "string",
        "description": "The time when the scheduled event is scheduled to end",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "description",
        "type": "string",
        "description": "The description of the scheduled event",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "entity_type",
        "type": "any",
        "description": "The entity type of the scheduled event",
        "optional": false,
        "isNullable": false,
        "enum_reference": "entity"
      },
      {
        "name": "image",
        "type": "object",
        "description": "The cover image of the scheduled event",
        "optional": true,
        "isNullable": false,
        "object_reference": "image_data"
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guild_scheduled_events",
    "name": "guilds/scheduledEvents/retrieve",
    "title": "Get Guild Scheduled Event",
    "method": "GET",
    "url": "/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}",
    "description": "Get a guild scheduled event\nReturns a [guild scheduled event](https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object) object on success.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "guild_scheduled_event_id",
        "description": "The id of the scheduled event",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "with_user_count",
        "type": "boolean",
        "description": "Include number of users subscribed to this event",
        "optional": true,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guild_scheduled_events",
    "name": "guilds/scheduledEvents/update",
    "title": "Modify Guild Scheduled Event",
    "method": "PATCH",
    "url": "/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}",
    "description": "Modify a guild scheduled event\nReturns the modified [guild scheduled event](https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object) object on success. Fires a [Guild Scheduled Event Update](https://discord.com/developers/docs/topics/gateway-events#guild-scheduled-event-update) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "guild_scheduled_event_id",
        "description": "The id of the scheduled event",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "channel_id",
        "type": "string",
        "description": "The channel id of the scheduled event, set to `null` if changing entity type to `EXTERNAL`",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "entity_metadata",
        "type": "object",
        "description": "The entity metadata of the scheduled event",
        "optional": true,
        "isNullable": true,
        "object_reference": "entity_metadata"
      },
      {
        "name": "name",
        "type": "string",
        "description": "The name of the scheduled event",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "privacy_level",
        "type": "integer",
        "description": "The privacy level of the scheduled event",
        "optional": true,
        "isNullable": false,
        "enum_reference": "guild_scheduled_event_privacy_level"
      },
      {
        "name": "scheduled_start_time",
        "type": "string",
        "description": "The time to schedule the scheduled event",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "scheduled_end_time",
        "type": "string",
        "description": "The time when the scheduled event is scheduled to end",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "description",
        "type": "string",
        "description": "The description of the scheduled event",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "entity_type",
        "type": "any",
        "description": "The entity type of the scheduled event",
        "optional": true,
        "isNullable": false,
        "enum_reference": "event_entity"
      },
      {
        "name": "status",
        "type": "any",
        "description": "The status of the scheduled event",
        "optional": true,
        "isNullable": false,
        "enum_reference": "guild_scheduled_event_status"
      },
      {
        "name": "image",
        "type": "object",
        "description": "The cover image of the scheduled event",
        "optional": true,
        "isNullable": false,
        "object_reference": "image_data"
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guild_scheduled_events",
    "name": "guilds/scheduledEvents/destroy",
    "title": "Delete Guild Scheduled Event",
    "method": "DELETE",
    "url": "/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}",
    "description": "Delete a guild scheduled event\nReturns a `204` on success. Fires a [Guild Scheduled Event Delete](https://discord.com/developers/docs/topics/gateway-events#guild-scheduled-event-delete) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "guild_scheduled_event_id",
        "description": "The id of the scheduled event",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guild_scheduled_events",
    "name": "guilds/scheduledEvents/users/list",
    "title": "Get Guild Scheduled Event Users",
    "method": "GET",
    "url": "/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}/users",
    "description": "Get a list of guild scheduled event users subscribed to a guild scheduled event\nReturns a list of [guild scheduled event user](https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-user-object) objects on success. Guild member data, if it exists, is included if the `with_member` query parameter is set.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "guild_scheduled_event_id",
        "description": "The id of the scheduled event",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "limit",
        "type": "float",
        "description": "Number of users to return (up to maximum 100)",
        "default": "100",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "with_member",
        "type": "boolean",
        "description": "Include guild member data if it exists",
        "default": "false",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "before",
        "type": "string",
        "description": "Consider only users before given user id",
        "default": "null",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "after",
        "type": "string",
        "description": "Consider only users after given user id",
        "default": "null",
        "optional": true,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "guild_templates",
    "name": "guilds/templates/retrieve",
    "title": "Get Guild Template",
    "method": "GET",
    "url": "/guilds/templates/{template_code}",
    "description": "Returns a [guild template](https://discord.com/developers/docs/resources/guild-template#guild-template-object) object for the given code.",
    "pathParams": [
      {
        "name": "template_code",
        "description": "The template code (unique ID)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guild_templates",
    "name": "guilds/templates/createFrom",
    "title": "Create Guild from Guild Template",
    "method": "POST",
    "url": "/guilds/templates/{template_code}",
    "description": "Create a new guild based on a template\nReturns a [guild](https://discord.com/developers/docs/resources/guild#guild-object) object on success. Fires a [Guild Create](https://discord.com/developers/docs/topics/gateway-events#guild-create) Gateway event.",
    "pathParams": [
      {
        "name": "template_code",
        "description": "The template code (unique ID)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "name",
        "type": "string",
        "description": "Name of the guild (2-100 characters)",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "icon",
        "type": "object",
        "description": "Base64 128x128 image for the guild icon",
        "optional": true,
        "isNullable": false,
        "object_reference": "image_data"
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guild_templates",
    "name": "guilds/templates/list",
    "title": "Get Guild Templates",
    "method": "GET",
    "url": "/guilds/{guild_id}/templates",
    "description": "Returns an array of [guild template](https://discord.com/developers/docs/resources/guild-template#guild-template-object) objects\nRequires the `MANAGE_GUILD` permission.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "guild_templates",
    "name": "guilds/templates/create",
    "title": "Create Guild Template",
    "method": "POST",
    "url": "/guilds/{guild_id}/templates",
    "description": "Creates a template for the guild\nRequires the `MANAGE_GUILD` permission. Returns the created [guild template](https://discord.com/developers/docs/resources/guild-template#guild-template-object) object on success.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "name",
        "type": "string",
        "description": "Name of the template (1-100 characters)",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "description",
        "type": "string",
        "description": "Description for the template (0-120 characters)",
        "optional": true,
        "isNullable": true
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guild_templates",
    "name": "guilds/templates/sync",
    "title": "Sync Guild Template",
    "method": "PUT",
    "url": "/guilds/{guild_id}/templates/{template_code}",
    "description": "Syncs the template to the guild's current state\nRequires the `MANAGE_GUILD` permission. Returns the [guild template](https://discord.com/developers/docs/resources/guild-template#guild-template-object) object on success.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "template_code",
        "description": "The template code (unique ID)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guild_templates",
    "name": "guilds/templates/update",
    "title": "Modify Guild Template",
    "method": "PATCH",
    "url": "/guilds/{guild_id}/templates/{template_code}",
    "description": "Modifies the template's metadata\nRequires the `MANAGE_GUILD` permission. Returns the [guild template](https://discord.com/developers/docs/resources/guild-template#guild-template-object) object on success.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "template_code",
        "description": "The template code (unique ID)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "name",
        "type": "string",
        "description": "Name of the template (1-100 characters)",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "description",
        "type": "string",
        "description": "Description for the template (0-120 characters)",
        "optional": true,
        "isNullable": true
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "guild_templates",
    "name": "guilds/templates/destroy",
    "title": "Delete Guild Template",
    "method": "DELETE",
    "url": "/guilds/{guild_id}/templates/{template_code}",
    "description": "",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "template_code",
        "description": "The template code (unique ID)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "invites",
    "name": "invites/retrieve",
    "title": "Get Invite",
    "method": "GET",
    "url": "/invites/{invite_code}",
    "description": "Returns an [invite](https://discord.com/developers/docs/resources/invite#invite-object) object for the given code.",
    "pathParams": [
      {
        "name": "invite_code",
        "description": "The invite code (unique ID)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "with_counts",
        "type": "boolean",
        "description": "Whether the invite should contain approximate member counts",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "with_expiration",
        "type": "boolean",
        "description": "Whether the invite should contain the expiration date",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "guild_scheduled_event_id",
        "type": "string",
        "description": "The guild scheduled event to include with the invite",
        "optional": true,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "invites",
    "name": "invites/destroy",
    "title": "Delete Invite",
    "method": "DELETE",
    "url": "/invites/{invite_code}",
    "description": "Delete an invite\nRequires the `MANAGE_CHANNELS` permission on the channel this invite belongs to, or `MANAGE_GUILD` to remove any invite across the guild. Returns an [invite](https://discord.com/developers/docs/resources/invite#invite-object) object on success. Fires an [Invite Delete](https://discord.com/developers/docs/topics/gateway-events#invite-delete) Gateway event.",
    "pathParams": [
      {
        "name": "invite_code",
        "description": "The invite code (unique ID)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "stage_instances",
    "name": "stageInstances/create",
    "title": "Create Stage Instance",
    "method": "POST",
    "url": "/stage-instances",
    "description": "Creates a new Stage instance associated to a Stage channel\nReturns that [Stage instance](https://discord.com/developers/docs/resources/stage-instance#stage-instance-object-stage-instance-structure). Fires a [Stage Instance Create](https://discord.com/developers/docs/topics/gateway-events#stage-instance-create) Gateway event.\n\nRequires the user to be a moderator of the Stage channel.",
    "pathParams": [],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "channel_id",
        "type": "string",
        "description": "The id of the Stage channel",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "topic",
        "type": "string",
        "description": "The topic of the Stage instance (1-120 characters)",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "privacy_level",
        "type": "integer",
        "description": "The [privacy level](https://discord.com/developers/docs/resources/stage-instance#stage-instance-object-privacy-level) of the Stage instance (default GUILD_ONLY)",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "send_start_notification",
        "type": "boolean",
        "description": "Notify @everyone that a Stage instance has started",
        "optional": true,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "stage_instances",
    "name": "stageInstances/retrieve",
    "title": "Get Stage Instance",
    "method": "GET",
    "url": "/stage-instances/{channel_id}",
    "description": "Gets the stage instance associated with the Stage channel, if it exists.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "stage_instances",
    "name": "stageInstances/update",
    "title": "Modify Stage Instance",
    "method": "PATCH",
    "url": "/stage-instances/{channel_id}",
    "description": "Updates fields of an existing Stage instance\nReturns the updated [Stage instance](https://discord.com/developers/docs/resources/stage-instance#stage-instance-object-stage-instance-structure). Fires a [Stage Instance Update](https://discord.com/developers/docs/topics/gateway-events#stage-instance-update) Gateway event.\n\nRequires the user to be a moderator of the Stage channel.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "topic",
        "type": "string",
        "description": "The topic of the Stage instance (1-120 characters)",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "privacy_level",
        "type": "integer",
        "description": "The [privacy level](https://discord.com/developers/docs/resources/stage-instance#stage-instance-object-privacy-level) of the Stage instance",
        "optional": true,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "stage_instances",
    "name": "stageInstances/destroy",
    "title": "Delete Stage Instance",
    "method": "DELETE",
    "url": "/stage-instances/{channel_id}",
    "description": "Deletes the Stage instance\nReturns `204 No Content`. Fires a [Stage Instance Delete](https://discord.com/developers/docs/topics/gateway-events#stage-instance-delete) Gateway event.\n\nRequires the user to be a moderator of the Stage channel.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "stickers",
    "name": "stickers/retrieve",
    "title": "Get Sticker",
    "method": "GET",
    "url": "/stickers/{sticker_id}",
    "description": "Returns a [sticker](https://discord.com/developers/docs/resources/sticker#sticker-object) object for the given sticker ID.",
    "pathParams": [
      {
        "name": "sticker_id",
        "description": "[id of the sticker](https://discord.com/developers/docs/reference#image-formatting)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "stickers",
    "name": "stickerPacks/list",
    "title": "List Nitro Sticker Packs",
    "method": "GET",
    "url": "/sticker-packs",
    "description": "Returns the list of sticker packs available to Nitro subscribers.",
    "pathParams": [],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "stickers",
    "name": "guilds/stickers/list",
    "title": "List Guild Stickers",
    "method": "GET",
    "url": "/guilds/{guild_id}/stickers",
    "description": "Returns an array of [sticker](https://discord.com/developers/docs/resources/sticker#sticker-object) objects for the given guild\nIncludes `user` fields if the bot has the `MANAGE_GUILD_EXPRESSIONS` permission.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "stickers",
    "name": "guilds/stickers/retrieve",
    "title": "Get Guild Sticker",
    "method": "GET",
    "url": "/guilds/{guild_id}/stickers/{sticker_id}",
    "description": "Returns a [sticker](https://discord.com/developers/docs/resources/sticker#sticker-object) object for the given guild and sticker IDs\nIncludes the `user` field if the bot has the `MANAGE_GUILD_EXPRESSIONS` permission.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "sticker_id",
        "description": "[id of the sticker](https://discord.com/developers/docs/reference#image-formatting)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "stickers",
    "name": "guilds/stickers/create",
    "title": "Create Guild Sticker",
    "method": "POST",
    "url": "/guilds/{guild_id}/stickers",
    "description": "Create a new sticker for the guild\nSend a `multipart/form-data` body. Requires the `MANAGE_GUILD_EXPRESSIONS` permission. Returns the new [sticker](https://discord.com/developers/docs/resources/sticker#sticker-object) object on success. Fires a [Guild Stickers Update](https://discord.com/developers/docs/topics/gateway-events#guild-stickers-update) Gateway event.\n\nEvery guilds has five free sticker slots by default, and each Boost level will grant access to more slots.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "stickers",
    "name": "guilds/stickers/update",
    "title": "Modify Guild Sticker",
    "method": "PATCH",
    "url": "/guilds/{guild_id}/stickers/{sticker_id}",
    "description": "Modify the given sticker\nRequires the `MANAGE_GUILD_EXPRESSIONS` permission. Returns the updated [sticker](https://discord.com/developers/docs/resources/sticker#sticker-object) object on success. Fires a [Guild Stickers Update](https://discord.com/developers/docs/topics/gateway-events#guild-stickers-update) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "sticker_id",
        "description": "[id of the sticker](https://discord.com/developers/docs/reference#image-formatting)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "name",
        "type": "string",
        "description": "Name of the sticker (2-30 characters)",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "description",
        "type": "string",
        "description": "Description of the sticker (2-100 characters)",
        "optional": false,
        "isNullable": true
      },
      {
        "name": "tags",
        "type": "string",
        "description": "Autocomplete/suggestion tags for the sticker (max 200 characters)",
        "optional": false,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "stickers",
    "name": "guilds/stickers/destroy",
    "title": "Delete Guild Sticker",
    "method": "DELETE",
    "url": "/guilds/{guild_id}/stickers/{sticker_id}",
    "description": "Delete the given sticker\nRequires the `MANAGE_GUILD_EXPRESSIONS` permission. Returns `204 No Content` on success. Fires a [Guild Stickers Update](https://discord.com/developers/docs/topics/gateway-events#guild-stickers-update) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "sticker_id",
        "description": "[id of the sticker](https://discord.com/developers/docs/reference#image-formatting)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "users",
    "name": "users/me/retrieve",
    "title": "Get Current User",
    "method": "GET",
    "url": "/users/@me",
    "description": "Returns the [user](https://discord.com/developers/docs/resources/user#user-object) object of the requester's account\nFor OAuth2, this requires the `identify` scope, which will return the object _without_ an email, and optionally the `email` scope, which returns the object _with_ an email.",
    "pathParams": [],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "users",
    "name": "users/retrieve",
    "title": "Get User",
    "method": "GET",
    "url": "/users/{user_id}",
    "description": "Returns a [user](https://discord.com/developers/docs/resources/user#user-object) object for a given user ID.",
    "pathParams": [
      {
        "name": "user_id",
        "description": "The user's id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "users",
    "name": "users/me/update",
    "title": "Modify Current User",
    "method": "PATCH",
    "url": "/users/@me",
    "description": "Modify the requester's user account settings\nReturns a [user](https://discord.com/developers/docs/resources/user#user-object) object on success. Fires a [User Update](https://discord.com/developers/docs/topics/gateway-events#user-update) Gateway event.",
    "pathParams": [],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "username",
        "type": "string",
        "description": "User's username, if changed may cause the user's discriminator to be randomized.",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "avatar",
        "type": "object",
        "description": "If passed, modifies the user's avatar",
        "optional": false,
        "isNullable": true,
        "object_reference": "image_data"
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "users",
    "name": "users/me/guilds/list",
    "title": "Get Current User Guilds",
    "method": "GET",
    "url": "/users/@me/guilds",
    "description": "Returns a list of partial [guild](https://discord.com/developers/docs/resources/guild#guild-object) objects the current user is a member of\nRequires the `guilds` OAuth2 scope.",
    "pathParams": [],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "users",
    "name": "users/me/guilds/member/retrieve",
    "title": "Get Current User Guild Member",
    "method": "GET",
    "url": "/users/@me/guilds/{guild_id}/member",
    "description": "Returns a [guild member](https://discord.com/developers/docs/resources/guild#guild-member-object) object for the current user\nRequires the `guilds.members.read` OAuth2 scope.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "users",
    "name": "users/me/guilds/destroy",
    "title": "Leave Guild",
    "method": "DELETE",
    "url": "/users/@me/guilds/{guild_id}",
    "description": "Leave a guild\nReturns a 204 empty response on success. Fires a [Guild Delete](https://discord.com/developers/docs/topics/gateway-events#guild-delete) Gateway event and a [Guild Member Remove](https://discord.com/developers/docs/topics/gateway-events#guild-member-remove) Gateway event.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "users",
    "name": "users/me/channels/create",
    "title": "Create DM",
    "method": "POST",
    "url": "/users/@me/channels",
    "description": "Create a new DM channel with a user\nReturns a [DM channel](https://discord.com/developers/docs/resources/channel#channel-object) object (if one already exists, it will be returned instead).",
    "pathParams": [],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "recipient_id",
        "type": "string",
        "description": "The recipient to open a DM channel with",
        "optional": false,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "users",
    "name": "users/me/channels/group/create",
    "title": "Create Group DM",
    "method": "POST",
    "url": "/users/@me/channels",
    "description": "Create a new group DM channel with multiple users\nReturns a [DM channel](https://discord.com/developers/docs/resources/channel#channel-object) object. This endpoint was intended to be used with the now-deprecated GameBridge SDK. Fires a [Channel Create](https://discord.com/developers/docs/topics/gateway-events#channel-create) Gateway event.",
    "pathParams": [],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "access_tokens",
        "type": "array",
        "description": "Access tokens of users that have granted your app the `gdm.join` scope",
        "optional": false,
        "isNullable": false,
        "schema": [
          {
            "type": "string"
          }
        ]
      },
      {
        "name": "nicks",
        "type": "object",
        "description": "A dictionary of user ids to their respective nicknames",
        "optional": false,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "users",
    "name": "users/me/connections/list",
    "title": "Get User Connections",
    "method": "GET",
    "url": "/users/@me/connections",
    "description": "Returns a list of [connection](https://discord.com/developers/docs/resources/user#connection-object) objects\nRequires the `connections` OAuth2 scope.",
    "pathParams": [],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "voice",
    "name": "voice/regions/list",
    "title": "List Voice Regions",
    "method": "GET",
    "url": "/voice/regions",
    "description": "",
    "pathParams": [],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "webhooks",
    "name": "channels/webhooks/create",
    "title": "Create Webhook",
    "method": "POST",
    "url": "/channels/{channel_id}/webhooks",
    "description": "Creates a new webhook and returns a [webhook](https://discord.com/developers/docs/resources/webhook#webhook-object) object on success\nRequires the `MANAGE_WEBHOOKS` permission. Fires a [Webhooks Update](https://discord.com/developers/docs/topics/gateway-events#webhooks-update) Gateway event.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "webhooks",
    "name": "channels/webhooks/list",
    "title": "Get Channel Webhooks",
    "method": "GET",
    "url": "/channels/{channel_id}/webhooks",
    "description": "Returns a list of channel [webhook](https://discord.com/developers/docs/resources/webhook#webhook-object) objects\nRequires the `MANAGE_WEBHOOKS` permission.",
    "pathParams": [
      {
        "name": "channel_id",
        "description": "The id of the channel",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "webhooks",
    "name": "guilds/webhooks/list",
    "title": "Get Guild Webhooks",
    "method": "GET",
    "url": "/guilds/{guild_id}/webhooks",
    "description": "Returns a list of guild [webhook](https://discord.com/developers/docs/resources/webhook#webhook-object) objects\nRequires the `MANAGE_WEBHOOKS` permission.",
    "pathParams": [
      {
        "name": "guild_id",
        "description": "Guild id",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "array"
    }
  },
  {
    "namespace": "webhooks",
    "name": "webhooks/retrieve",
    "title": "Get Webhook",
    "method": "GET",
    "url": "/webhooks/{webhook_id}",
    "description": "Returns the new [webhook](https://discord.com/developers/docs/resources/webhook#webhook-object) object for the given id.",
    "pathParams": [
      {
        "name": "webhook_id",
        "description": "The id of the webhook",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "webhooks",
    "name": "webhooks/token/retrieve",
    "title": "Get Webhook with Token",
    "method": "GET",
    "url": "/webhooks/{webhook_id}/{webhook_token}",
    "description": "Same as above, except this call does not require authentication and returns no user in the webhook object.",
    "pathParams": [
      {
        "name": "webhook_id",
        "description": "The id of the webhook",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "webhook_token",
        "description": "The secure token of the webhook (returned for Incoming Webhooks)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "webhooks",
    "name": "webhooks/update",
    "title": "Modify Webhook",
    "method": "PATCH",
    "url": "/webhooks/{webhook_id}",
    "description": "Modify a webhook\nRequires the `MANAGE_WEBHOOKS` permission. Returns the updated [webhook](https://discord.com/developers/docs/resources/webhook#webhook-object) object on success. Fires a [Webhooks Update](https://discord.com/developers/docs/topics/gateway-events#webhooks-update) Gateway event.",
    "pathParams": [
      {
        "name": "webhook_id",
        "description": "The id of the webhook",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [
      {
        "name": "name",
        "type": "string",
        "description": "The default name of the webhook",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "avatar",
        "type": "object",
        "description": "Image for the default webhook avatar",
        "optional": false,
        "isNullable": true,
        "object_reference": "image_data"
      },
      {
        "name": "channel_id",
        "type": "string",
        "description": "The new channel id this webhook should be moved to",
        "optional": false,
        "isNullable": false
      }
    ],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "webhooks",
    "name": "webhooks/token/update",
    "title": "Modify Webhook with Token",
    "method": "PATCH",
    "url": "/webhooks/{webhook_id}/{webhook_token}",
    "description": "Same as above, except this call does not require authentication, does not accept a `channel_id` parameter in the body, and does not return a user in the webhook object.",
    "pathParams": [
      {
        "name": "webhook_id",
        "description": "The id of the webhook",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "webhook_token",
        "description": "The secure token of the webhook (returned for Incoming Webhooks)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "webhooks",
    "name": "webhooks/destroy",
    "title": "Delete Webhook",
    "method": "DELETE",
    "url": "/webhooks/{webhook_id}",
    "description": "Delete a webhook permanently\nRequires the `MANAGE_WEBHOOKS` permission. Returns a `204 No Content` response on success. Fires a [Webhooks Update](https://discord.com/developers/docs/topics/gateway-events#webhooks-update) Gateway event.",
    "pathParams": [
      {
        "name": "webhook_id",
        "description": "The id of the webhook",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "webhooks",
    "name": "webhooks/token/destroy",
    "title": "Delete Webhook with Token",
    "method": "DELETE",
    "url": "/webhooks/{webhook_id}/{webhook_token}",
    "description": "Same as above, except this call does not require authentication.",
    "pathParams": [
      {
        "name": "webhook_id",
        "description": "The id of the webhook",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "webhook_token",
        "description": "The secure token of the webhook (returned for Incoming Webhooks)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "webhooks",
    "name": "webhooks/execute",
    "title": "Execute Webhook",
    "method": "POST",
    "url": "/webhooks/{webhook_id}/{webhook_token}",
    "description": "Refer to [Uploading Files](https://discord.com/developers/docs/reference#uploading-files) for details on attachments and `multipart/form-data` requests\nReturns a message or `204 No Content` depending on the `wait` query parameter.",
    "pathParams": [
      {
        "name": "webhook_id",
        "description": "The id of the webhook",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "webhook_token",
        "description": "The secure token of the webhook (returned for Incoming Webhooks)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "wait",
        "type": "boolean",
        "description": "Waits for server confirmation of message send before response, and returns the created message body (defaults to `false`; when `false` a message that is not saved does not return an error)",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "thread_id",
        "type": "string",
        "description": "Send a message to the specified thread within a webhook's channel\nThe thread will automatically be unarchived.",
        "optional": true,
        "isNullable": false
      }
    ],
    "jsonParams": [
      {
        "name": "content",
        "type": "string",
        "description": "The message contents (up to 2000 characters)",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "username",
        "type": "string",
        "description": "Override the default username of the webhook",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "avatar_url",
        "type": "string",
        "description": "Override the default avatar of the webhook",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "tts",
        "type": "boolean",
        "description": "True if this is a TTS message",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "embeds",
        "type": "array",
        "description": "Embedded `rich` content",
        "optional": true,
        "isNullable": false,
        "schema": [
          {
            "type": "object",
            "object_reference": "up_to_10_embed"
          }
        ]
      },
      {
        "name": "allowed_mentions",
        "type": "object",
        "description": "Allowed mentions for the message",
        "optional": true,
        "isNullable": false,
        "object_reference": "allowed_mention"
      },
      {
        "name": "components",
        "type": "array",
        "description": "The components to include with the message",
        "optional": true,
        "isNullable": false,
        "schema": [
          {
            "type": "object",
            "object_reference": "component",
            "name": "action_row"
          }
        ]
      },
      {
        "name": "attachments",
        "type": "array",
        "description": "Attachment objects with filename and description",
        "optional": true,
        "isNullable": false,
        "schema": [
          {
            "name": "attachment",
            "type": "object",
            "schema": [
              {
                "name": "filename",
                "type": "string"
              },
              {
                "name": "description",
                "type": "string"
              },
              {
                "name": "file",
                "type": "buffer"
              }
            ]
          }
        ]
      },
      {
        "name": "flags",
        "type": "integer",
        "description": "[message flags](https://discord.com/developers/docs/resources/channel#message-object-message-flags) combined as a [bitfield](https://en.wikipedia.org/wiki/Bit_field) (only `SUPPRESS_EMBEDS` can be set)",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "thread_name",
        "type": "string",
        "description": "Name of thread to create (requires the webhook channel to be a forum channel)",
        "optional": true,
        "isNullable": false
      }
    ],
    "supports_multipart": true,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "webhooks",
    "name": "webhooks/slack/execute",
    "title": "Execute Slack-Compatible Webhook",
    "method": "POST",
    "url": "/webhooks/{webhook_id}/{webhook_token}/slack",
    "description": "Refer to [Slack's documentation](https://api.slack.com/incoming-webhooks) for more information\nWe do not support Slack's `channel`, `icon_emoji`, `mrkdwn`, or `mrkdwn_in` properties.",
    "pathParams": [
      {
        "name": "webhook_id",
        "description": "The id of the webhook",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "webhook_token",
        "description": "The secure token of the webhook (returned for Incoming Webhooks)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "thread_id",
        "type": "string",
        "description": "Id of the thread to send the message in",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "wait",
        "type": "boolean",
        "description": "Waits for server confirmation of message send before response (defaults to `true`; when `false` a message that is not saved does not return an error)",
        "optional": true,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "webhooks",
    "name": "webhooks/github/execute",
    "title": "Execute GitHub-Compatible Webhook",
    "method": "POST",
    "url": "/webhooks/{webhook_id}/{webhook_token}/github",
    "description": "Add a new webhook to your GitHub repo (in the repo's settings), and use this endpoint as the \"Payload URL.\" You can choose what events your Discord channel receives by choosing the \"Let me select individual events\" option and selecting individual events for the new webhook you're configuring.",
    "pathParams": [
      {
        "name": "webhook_id",
        "description": "The id of the webhook",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "webhook_token",
        "description": "The secure token of the webhook (returned for Incoming Webhooks)",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "thread_id",
        "type": "string",
        "description": "Id of the thread to send the message in",
        "optional": true,
        "isNullable": false
      },
      {
        "name": "wait",
        "type": "boolean",
        "description": "Waits for server confirmation of message send before response (defaults to `true`; when `false` a message that is not saved does not return an error)",
        "optional": true,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "webhooks",
    "name": "webhooks/messages/retrieve",
    "title": "Get Webhook Message",
    "method": "GET",
    "url": "/webhooks/{webhook_id}/{webhook_token}/messages/{message_id}",
    "description": "Returns a previously-sent webhook message from the same token\nReturns a [message](https://discord.com/developers/docs/resources/channel#message-object) object on success.",
    "pathParams": [
      {
        "name": "webhook_id",
        "description": "The id of the webhook",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "webhook_token",
        "description": "The secure token of the webhook (returned for Incoming Webhooks)",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "message_id",
        "description": "Id of the message",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "thread_id",
        "type": "string",
        "description": "Id of the thread the message is in",
        "optional": true,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "webhooks",
    "name": "webhooks/messages/update",
    "title": "Edit Webhook Message",
    "method": "PATCH",
    "url": "/webhooks/{webhook_id}/{webhook_token}/messages/{message_id}",
    "description": "Edits a previously-sent webhook message from the same token\nReturns a [message](https://discord.com/developers/docs/resources/channel#message-object) object on success.\n\nWhen the `content` field is edited, the `mentions` array in the message object will be reconstructed from scratch based on the new content. The `allowed_mentions` field of the edit request controls how this happens. If there is no explicit `allowed_mentions` in the edit request, the content will be parsed with _default_ allowances, that is, without regard to whether or not an `allowed_mentions` was present in the request that originally created the message.\n\nRefer to [Uploading Files](https://discord.com/developers/docs/reference#uploading-files) for details on attachments and `multipart/form-data` requests.\nAny provided files will be **appended** to the message. To remove or replace files you will have to supply the `attachments` field which specifies the files to retain on the message after edit.",
    "pathParams": [
      {
        "name": "webhook_id",
        "description": "The id of the webhook",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "webhook_token",
        "description": "The secure token of the webhook (returned for Incoming Webhooks)",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "message_id",
        "description": "Id of the message",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "thread_id",
        "type": "string",
        "description": "Id of the thread the message is in",
        "optional": true,
        "isNullable": false
      }
    ],
    "jsonParams": [
      {
        "name": "content",
        "type": "string",
        "description": "The message contents (up to 2000 characters)",
        "optional": true,
        "isNullable": true
      },
      {
        "name": "embeds",
        "type": "array",
        "description": "Embedded `rich` content",
        "optional": true,
        "isNullable": true,
        "schema": [
          {
            "type": "object",
            "object_reference": "up_to_10_embed"
          }
        ]
      },
      {
        "name": "allowed_mentions",
        "type": "object",
        "description": "Allowed mentions for the message",
        "optional": true,
        "isNullable": true,
        "object_reference": "allowed_mention"
      },
      {
        "name": "components",
        "type": "array",
        "description": "The components to include with the message",
        "optional": true,
        "isNullable": true,
        "schema": [
          {
            "type": "object",
            "object_reference": "component",
            "name": "action_row"
          }
        ]
      },
      {
        "name": "attachments",
        "type": "array",
        "description": "Attached files to keep and possible descriptions for new files",
        "optional": true,
        "isNullable": true,
        "schema": [
          {
            "name": "attachment",
            "type": "object",
            "schema": [
              {
                "name": "filename",
                "type": "string"
              },
              {
                "name": "description",
                "type": "string"
              },
              {
                "name": "file",
                "type": "buffer"
              }
            ]
          }
        ]
      }
    ],
    "supports_multipart": true,
    "returns": {
      "type": "object"
    }
  },
  {
    "namespace": "webhooks",
    "name": "webhooks/messages/destroy",
    "title": "Delete Webhook Message",
    "method": "DELETE",
    "url": "/webhooks/{webhook_id}/{webhook_token}/messages/{message_id}",
    "description": "Deletes a message that was created by the webhook\nReturns a `204 No Content` response on success.",
    "pathParams": [
      {
        "name": "webhook_id",
        "description": "The id of the webhook",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "webhook_token",
        "description": "The secure token of the webhook (returned for Incoming Webhooks)",
        "type": "string",
        "optional": false,
        "isNullable": false
      },
      {
        "name": "message_id",
        "description": "Id of the message",
        "type": "string",
        "optional": false,
        "isNullable": false
      }
    ],
    "queryParams": [
      {
        "name": "thread_id",
        "type": "string",
        "description": "Id of the thread the message is in",
        "optional": true,
        "isNullable": false
      }
    ],
    "jsonParams": [],
    "supports_multipart": false,
    "returns": {
      "type": "object"
    }
  }
]